
Task_5_Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003574  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b4  080037b4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080037b4  080037b4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b4  080037b4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080037bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000014  080037d0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080037d0  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c06b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c44  00000000  00000000  0002c0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002e700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028382  00000000  00000000  0002f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7a9  00000000  00000000  000573b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4a7a  00000000  00000000  00062b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001575d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002824  00000000  00000000  00157628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003708 	.word	0x08003708

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08003708 	.word	0x08003708

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <mems_init>:
static void MX_GPIO_Init(void);
static void MX_I2C3_Init(void);
static void LM75_Error_Handler(char * file, int line);

uint8_t mems_init(uint8_t acc_datarate, uint8_t acc_fullscale)
{  
 8000200:	b580      	push	{r7, lr}
 8000202:	b0ac      	sub	sp, #176	; 0xb0
 8000204:	af04      	add	r7, sp, #16
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000214:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000216:	2300      	movs	r3, #0
 8000218:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4618      	mov	r0, r3
 8000220:	f002 fd3a 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d003      	beq.n	8000232 <mems_init+0x32>
  {
    //_Error_Handler(__FILE__, __LINE__);
	  LM75_Error_Handler(__FILE__, __LINE__);
 800022a:	213d      	movs	r1, #61	; 0x3d
 800022c:	483f      	ldr	r0, [pc, #252]	; (800032c <mems_init+0x12c>)
 800022e:	f000 f91b 	bl	8000468 <LM75_Error_Handler>
	//Error_Handler();

  }
  
  MX_GPIO_Init();
 8000232:	f000 f8e7 	bl	8000404 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000236:	f000 f89d 	bl	8000374 <MX_I2C3_Init>
  
  uint8_t acc_axis = 7; // all axis 
 800023a:	2307      	movs	r3, #7
 800023c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint8_t r[4];
  
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, MEMS_ACC_ID_REG, 1, r, 1, 1000) != HAL_OK)
 8000240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000244:	9302      	str	r3, [sp, #8]
 8000246:	2301      	movs	r3, #1
 8000248:	9301      	str	r3, [sp, #4]
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	9300      	str	r3, [sp, #0]
 8000250:	2301      	movs	r3, #1
 8000252:	220f      	movs	r2, #15
 8000254:	213a      	movs	r1, #58	; 0x3a
 8000256:	4836      	ldr	r0, [pc, #216]	; (8000330 <mems_init+0x130>)
 8000258:	f001 fa5e 	bl	8001718 <HAL_I2C_Mem_Read>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d003      	beq.n	800026a <mems_init+0x6a>
	  LM75_Error_Handler(__FILE__, __LINE__);	
 8000262:	2149      	movs	r1, #73	; 0x49
 8000264:	4831      	ldr	r0, [pc, #196]	; (800032c <mems_init+0x12c>)
 8000266:	f000 f8ff 	bl	8000468 <LM75_Error_Handler>
  if(r[0] != MEMS_ACC_ID)
 800026a:	7b3b      	ldrb	r3, [r7, #12]
 800026c:	2b41      	cmp	r3, #65	; 0x41
 800026e:	d001      	beq.n	8000274 <mems_init+0x74>
	  return 1;  
 8000270:	2301      	movs	r3, #1
 8000272:	e056      	b.n	8000322 <mems_init+0x122>
    
  if(acc_axis == MEMS_ACC_AXIS_XYZ)
 8000274:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000278:	2b08      	cmp	r3, #8
 800027a:	d102      	bne.n	8000282 <mems_init+0x82>
	  acc_axis = MEMS_ACC_AXIS_X | MEMS_ACC_AXIS_Y | MEMS_ACC_AXIS_Z; // each axis is enabled individually
 800027c:	2307      	movs	r3, #7
 800027e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(acc_datarate == 0 || acc_datarate >= 7 || acc_axis > 7 || (acc_fullscale & 0xfc) != 0 || acc_fullscale == 1)
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d00e      	beq.n	80002a6 <mems_init+0xa6>
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	2b06      	cmp	r3, #6
 800028c:	d80b      	bhi.n	80002a6 <mems_init+0xa6>
 800028e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000292:	2b07      	cmp	r3, #7
 8000294:	d807      	bhi.n	80002a6 <mems_init+0xa6>
 8000296:	79bb      	ldrb	r3, [r7, #6]
 8000298:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800029c:	2b00      	cmp	r3, #0
 800029e:	d102      	bne.n	80002a6 <mems_init+0xa6>
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d101      	bne.n	80002aa <mems_init+0xaa>
	  return 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e03b      	b.n	8000322 <mems_init+0x122>
  
  r[0] = (acc_datarate << 4) | acc_axis;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	011b      	lsls	r3, r3, #4
 80002ae:	b25a      	sxtb	r2, r3
 80002b0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80002b4:	4313      	orrs	r3, r2
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	733b      	strb	r3, [r7, #12]
  if(HAL_I2C_Mem_Write(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 80002bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	2301      	movs	r3, #1
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2301      	movs	r3, #1
 80002ce:	2220      	movs	r2, #32
 80002d0:	213a      	movs	r1, #58	; 0x3a
 80002d2:	4817      	ldr	r0, [pc, #92]	; (8000330 <mems_init+0x130>)
 80002d4:	f001 f90c 	bl	80014f0 <HAL_I2C_Mem_Write>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d003      	beq.n	80002e6 <mems_init+0xe6>
	  MEMS_ACC_CTRL1_REG, 1, r, 1, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);
 80002de:	2155      	movs	r1, #85	; 0x55
 80002e0:	4812      	ldr	r0, [pc, #72]	; (800032c <mems_init+0x12c>)
 80002e2:	f000 f8c1 	bl	8000468 <LM75_Error_Handler>
  
  r[0] = (acc_fullscale << 4) | 4; // set fullscale, turn address autoincrement on
 80002e6:	79bb      	ldrb	r3, [r7, #6]
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	b25b      	sxtb	r3, r3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	733b      	strb	r3, [r7, #12]
  if(HAL_I2C_Mem_Write(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 80002f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fa:	9302      	str	r3, [sp, #8]
 80002fc:	2301      	movs	r3, #1
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	f107 030c 	add.w	r3, r7, #12
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2301      	movs	r3, #1
 8000308:	2223      	movs	r2, #35	; 0x23
 800030a:	213a      	movs	r1, #58	; 0x3a
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <mems_init+0x130>)
 800030e:	f001 f8ef 	bl	80014f0 <HAL_I2C_Mem_Write>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <mems_init+0x120>
	  MEMS_ACC_CTRL4_REG, 1, r, 1, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);
 8000318:	215a      	movs	r1, #90	; 0x5a
 800031a:	4804      	ldr	r0, [pc, #16]	; (800032c <mems_init+0x12c>)
 800031c:	f000 f8a4 	bl	8000468 <LM75_Error_Handler>
  
  return 0;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	37a0      	adds	r7, #160	; 0xa0
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	08003720 	.word	0x08003720
 8000330:	20000040 	.word	0x20000040

08000334 <mems_acc_read_xyz>:

void mems_acc_read_xyz(struct mems_xyz_res* res)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af04      	add	r7, sp, #16
 800033a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 800033c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000340:	9302      	str	r3, [sp, #8]
 8000342:	2306      	movs	r3, #6
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2301      	movs	r3, #1
 800034c:	22a8      	movs	r2, #168	; 0xa8
 800034e:	213a      	movs	r1, #58	; 0x3a
 8000350:	4806      	ldr	r0, [pc, #24]	; (800036c <mems_acc_read_xyz+0x38>)
 8000352:	f001 f9e1 	bl	8001718 <HAL_I2C_Mem_Read>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d003      	beq.n	8000364 <mems_acc_read_xyz+0x30>
	  MEMS_ACC_X_REG | I2C_MRW, 1, (uint8_t*)res, 6, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
 800035c:	2163      	movs	r1, #99	; 0x63
 800035e:	4804      	ldr	r0, [pc, #16]	; (8000370 <mems_acc_read_xyz+0x3c>)
 8000360:	f000 f882 	bl	8000468 <LM75_Error_Handler>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000040 	.word	0x20000040
 8000370:	08003720 	.word	0x08003720

08000374 <MX_I2C3_Init>:
  return res;
}

/* I2C3 init function */
static void MX_I2C3_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <MX_I2C3_Init+0x80>)
 800037a:	4a1f      	ldr	r2, [pc, #124]	; (80003f8 <MX_I2C3_Init+0x84>)
 800037c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <MX_I2C3_Init+0x80>)
 8000380:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <MX_I2C3_Init+0x88>)
 8000382:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_I2C3_Init+0x80>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_I2C3_Init+0x80>)
 800038c:	2201      	movs	r2, #1
 800038e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_I2C3_Init+0x80>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_I2C3_Init+0x80>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_I2C3_Init+0x80>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_I2C3_Init+0x80>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_I2C3_Init+0x80>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80003ae:	4811      	ldr	r0, [pc, #68]	; (80003f4 <MX_I2C3_Init+0x80>)
 80003b0:	f001 f80e 	bl	80013d0 <HAL_I2C_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d003      	beq.n	80003c2 <MX_I2C3_Init+0x4e>
  {
    //_Error_Handler(__FILE__, __LINE__);
	//Error_Handler();
	 LM75_Error_Handler(__FILE__, __LINE__);
 80003ba:	2192      	movs	r1, #146	; 0x92
 80003bc:	4810      	ldr	r0, [pc, #64]	; (8000400 <MX_I2C3_Init+0x8c>)
 80003be:	f000 f853 	bl	8000468 <LM75_Error_Handler>

  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c2:	2100      	movs	r1, #0
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <MX_I2C3_Init+0x80>)
 80003c6:	f001 fd67 	bl	8001e98 <HAL_I2CEx_ConfigAnalogFilter>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d003      	beq.n	80003d8 <MX_I2C3_Init+0x64>
  {
    //_Error_Handler(__FILE__, __LINE__);
	//Error_Handler();
	 LM75_Error_Handler(__FILE__, __LINE__);
 80003d0:	219d      	movs	r1, #157	; 0x9d
 80003d2:	480b      	ldr	r0, [pc, #44]	; (8000400 <MX_I2C3_Init+0x8c>)
 80003d4:	f000 f848 	bl	8000468 <LM75_Error_Handler>

  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80003d8:	2100      	movs	r1, #0
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <MX_I2C3_Init+0x80>)
 80003dc:	f001 fda7 	bl	8001f2e <HAL_I2CEx_ConfigDigitalFilter>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d003      	beq.n	80003ee <MX_I2C3_Init+0x7a>
  {
    //_Error_Handler(__FILE__, __LINE__);
	//Error_Handler();
	 LM75_Error_Handler(__FILE__, __LINE__);
 80003e6:	21a7      	movs	r1, #167	; 0xa7
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_I2C3_Init+0x8c>)
 80003ea:	f000 f83d 	bl	8000468 <LM75_Error_Handler>


  }

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000040 	.word	0x20000040
 80003f8:	40005c00 	.word	0x40005c00
 80003fc:	10909cec 	.word	0x10909cec
 8000400:	08003720 	.word	0x08003720

08000404 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_GPIO_Init+0x5c>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <MX_GPIO_Init+0x5c>)
 8000410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_GPIO_Init+0x5c>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000422:	f001 fe35 	bl	8002090 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin : MEMS_RDY_MAG_Pin */
  GPIO_InitStruct.Pin = MEMS_RDY_MAG_Pin;
 8000426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MEMS_RDY_MAG_GPIO_Port, &GPIO_InitStruct);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	480a      	ldr	r0, [pc, #40]	; (8000464 <MX_GPIO_Init+0x60>)
 800043a:	f000 fe07 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT_AXL_Pin MEMS_INT_MAG_Pin */
  GPIO_InitStruct.Pin = MEMS_INT_AXL_Pin|MEMS_INT_MAG_Pin;
 800043e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000442:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000444:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000448:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	4804      	ldr	r0, [pc, #16]	; (8000464 <MX_GPIO_Init+0x60>)
 8000454:	f000 fdfa 	bl	800104c <HAL_GPIO_Init>

}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000
 8000464:	48001800 	.word	0x48001800

08000468 <LM75_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void LM75_Error_Handler(char * file, int line)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000472:	e7fe      	b.n	8000472 <LM75_Error_Handler+0xa>

08000474 <HAL_I2C_MspInit>:
  }
  /* USER CODE END Error_Handler_Debug */ 
}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <HAL_I2C_MspInit+0x54>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d11c      	bne.n	80004c0 <HAL_I2C_MspInit+0x4c>
  
    /**I2C3 GPIO Configuration    
    PG7     ------> I2C3_SCL
    PG8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = MEMS_I2C3_SCL_Pin|MEMS_I2C3_SDA_Pin;
 8000486:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800048a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800048c:	2312      	movs	r3, #18
 800048e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000490:	2301      	movs	r3, #1
 8000492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000494:	2303      	movs	r3, #3
 8000496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000498:	2304      	movs	r3, #4
 800049a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800049c:	f107 030c 	add.w	r3, r7, #12
 80004a0:	4619      	mov	r1, r3
 80004a2:	480a      	ldr	r0, [pc, #40]	; (80004cc <HAL_I2C_MspInit+0x58>)
 80004a4:	f000 fdd2 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <HAL_I2C_MspInit+0x5c>)
 80004aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <HAL_I2C_MspInit+0x5c>)
 80004ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004b2:	6593      	str	r3, [r2, #88]	; 0x58
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_I2C_MspInit+0x5c>)
 80004b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40005c00 	.word	0x40005c00
 80004cc:	48001800 	.word	0x48001800
 80004d0:	40021000 	.word	0x40021000

080004d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	6039      	str	r1, [r7, #0]
 80004de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	db0a      	blt.n	80004fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	490c      	ldr	r1, [pc, #48]	; (8000520 <__NVIC_SetPriority+0x4c>)
 80004ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f2:	0112      	lsls	r2, r2, #4
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	440b      	add	r3, r1
 80004f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004fc:	e00a      	b.n	8000514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4908      	ldr	r1, [pc, #32]	; (8000524 <__NVIC_SetPriority+0x50>)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	f003 030f 	and.w	r3, r3, #15
 800050a:	3b04      	subs	r3, #4
 800050c:	0112      	lsls	r2, r2, #4
 800050e:	b2d2      	uxtb	r2, r2
 8000510:	440b      	add	r3, r1
 8000512:	761a      	strb	r2, [r3, #24]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000e100 	.word	0xe000e100
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3b01      	subs	r3, #1
 8000534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000538:	d301      	bcc.n	800053e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800053a:	2301      	movs	r3, #1
 800053c:	e00f      	b.n	800055e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <SysTick_Config+0x40>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3b01      	subs	r3, #1
 8000544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000546:	210f      	movs	r1, #15
 8000548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800054c:	f7ff ffc2 	bl	80004d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <SysTick_Config+0x40>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <SysTick_Config+0x40>)
 8000558:	2207      	movs	r2, #7
 800055a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	e000e010 	.word	0xe000e010

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <main+0x84>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <main+0x84>)
 8000578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <main+0x84>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <main+0x84>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <main+0x84>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <main+0x84>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <main+0x84>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <main+0x84>)
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <main+0x84>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fbec 	bl	8000d96 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_PWREx_EnableVddIO2();
 80005be:	f001 fd67 	bl	8002090 <HAL_PWREx_EnableVddIO2>
  switchInit();
 80005c2:	f000 f861 	bl	8000688 <switchInit>
  baseTransistInit();
 80005c6:	f000 f877 	bl	80006b8 <baseTransistInit>
  segmentsInit();
 80005ca:	f000 f88d 	bl	80006e8 <segmentsInit>
  mems_init(MEMS_ACC_DATARATE_10HZ, MEMS_ACC_FULLSCALE_2G);
 80005ce:	2100      	movs	r1, #0
 80005d0:	2001      	movs	r0, #1
 80005d2:	f7ff fe15 	bl	8000200 <mems_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f811 	bl	80005fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock / 1000); // SysTick_Handler() called within 1ms
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <main+0x88>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <main+0x8c>)
 80005e0:	fba2 2303 	umull	r2, r3, r2, r3
 80005e4:	099b      	lsrs	r3, r3, #6
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff9e 	bl	8000528 <SysTick_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x80>
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	20000008 	.word	0x20000008
 80005f8:	10624dd3 	.word	0x10624dd3

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	; 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	; 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f832 	bl	8003674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f001 fcdf 	bl	8001fe4 <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800062c:	f000 f876 	bl	800071c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000630:	2310      	movs	r3, #16
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800063c:	2360      	movs	r3, #96	; 0x60
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fd31 	bl	80020b0 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000654:	f000 f862 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f943 	bl	80028fc <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800067c:	f000 f84e 	bl	800071c <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3758      	adds	r7, #88	; 0x58
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <switchInit>:
/* USER CODE BEGIN 4 */



void switchInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef Joys;
	Joys.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
	Joys.Pin = GPIO_PIN_1 /* JOY_LEFT */ | GPIO_PIN_0 /* JOY_RIGHT */ | GPIO_PIN_2 /* JOY_DOWN*/;
 8000692:	2307      	movs	r3, #7
 8000694:	607b      	str	r3, [r7, #4]
	Joys.Pull = GPIO_PULLUP;
 8000696:	2301      	movs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
	Joys.Speed = GPIO_SPEED_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
	Joys.Alternate = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &Joys);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <switchInit+0x2c>)
 80006a8:	f000 fcd0 	bl	800104c <HAL_GPIO_Init>
}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	48001000 	.word	0x48001000

080006b8 <baseTransistInit>:

void baseTransistInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef Transistors;
	Transistors.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
	Transistors.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80006c2:	233c      	movs	r3, #60	; 0x3c
 80006c4:	607b      	str	r3, [r7, #4]
	Transistors.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
	Transistors.Speed = GPIO_SPEED_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
	Transistors.Alternate = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &Transistors);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <baseTransistInit+0x2c>)
 80006d8:	f000 fcb8 	bl	800104c <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	48000400 	.word	0x48000400

080006e8 <segmentsInit>:

void segmentsInit()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef Segments;
	Segments.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
	Segments.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_9;
 80006f2:	f240 237f 	movw	r3, #639	; 0x27f
 80006f6:	607b      	str	r3, [r7, #4]
	Segments.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	Segments.Speed = GPIO_SPEED_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
	Segments.Alternate = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOG, &Segments);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <segmentsInit+0x30>)
 800070a:	f000 fc9f 	bl	800104c <HAL_GPIO_Init>
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	48001800 	.word	0x48001800

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6613      	str	r3, [r2, #96]	; 0x60
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6593      	str	r3, [r2, #88]	; 0x58
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007be:	f000 fb3f 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  static int miliSec = 0;
  inputHandling();
 80007c2:	f000 f8c5 	bl	8000950 <inputHandling>
  int digitOf4Sec = miliSec % 4;
 80007c6:	4b56      	ldr	r3, [pc, #344]	; (8000920 <SysTick_Handler+0x168>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	425a      	negs	r2, r3
 80007cc:	f003 0303 	and.w	r3, r3, #3
 80007d0:	f002 0203 	and.w	r2, r2, #3
 80007d4:	bf58      	it	pl
 80007d6:	4253      	negpl	r3, r2
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d81b      	bhi.n	8000818 <SysTick_Handler+0x60>
 80007e0:	a201      	add	r2, pc, #4	; (adr r2, 80007e8 <SysTick_Handler+0x30>)
 80007e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e6:	bf00      	nop
 80007e8:	080007f9 	.word	0x080007f9
 80007ec:	08000801 	.word	0x08000801
 80007f0:	08000809 	.word	0x08000809
 80007f4:	08000811 	.word	0x08000811
  switch(digitOf4Sec)
  {
	  case 0:
		  showDigit("axis");
 80007f8:	484a      	ldr	r0, [pc, #296]	; (8000924 <SysTick_Handler+0x16c>)
 80007fa:	f000 f963 	bl	8000ac4 <showDigit>
		  break;
 80007fe:	e00b      	b.n	8000818 <SysTick_Handler+0x60>
	  case 1: // digit 2
		  showDigit("first");
 8000800:	4849      	ldr	r0, [pc, #292]	; (8000928 <SysTick_Handler+0x170>)
 8000802:	f000 f95f 	bl	8000ac4 <showDigit>
		  break;
 8000806:	e007      	b.n	8000818 <SysTick_Handler+0x60>
	  case 2: // digit 3
		  showDigit("second");
 8000808:	4848      	ldr	r0, [pc, #288]	; (800092c <SysTick_Handler+0x174>)
 800080a:	f000 f95b 	bl	8000ac4 <showDigit>
		  break;
 800080e:	e003      	b.n	8000818 <SysTick_Handler+0x60>
	  case 3: // digit 4
		  showDigit("third");
 8000810:	4847      	ldr	r0, [pc, #284]	; (8000930 <SysTick_Handler+0x178>)
 8000812:	f000 f957 	bl	8000ac4 <showDigit>
		  break;
 8000816:	bf00      	nop
  }
  if(miliSec != 0)
 8000818:	4b41      	ldr	r3, [pc, #260]	; (8000920 <SysTick_Handler+0x168>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d075      	beq.n	800090c <SysTick_Handler+0x154>
  {
	  if(miliSec / 1000 == 4)
 8000820:	4b3f      	ldr	r3, [pc, #252]	; (8000920 <SysTick_Handler+0x168>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800082c:	d202      	bcs.n	8000834 <SysTick_Handler+0x7c>
		  miliSec = 0;
 800082e:	4b3c      	ldr	r3, [pc, #240]	; (8000920 <SysTick_Handler+0x168>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
	  if(miliSec % 1000 == 0)
 8000834:	4b3a      	ldr	r3, [pc, #232]	; (8000920 <SysTick_Handler+0x168>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <SysTick_Handler+0x17c>)
 800083a:	fb83 1302 	smull	r1, r3, r3, r2
 800083e:	1199      	asrs	r1, r3, #6
 8000840:	17d3      	asrs	r3, r2, #31
 8000842:	1acb      	subs	r3, r1, r3
 8000844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000848:	fb01 f303 	mul.w	r3, r1, r3
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d15c      	bne.n	800090c <SysTick_Handler+0x154>
	  {
		  mems_acc_read_xyz(&acc);
 8000852:	4839      	ldr	r0, [pc, #228]	; (8000938 <SysTick_Handler+0x180>)
 8000854:	f7ff fd6e 	bl	8000334 <mems_acc_read_xyz>
		  x = floorf((acc.x * 2.0f / MEMS_ACC_MAXVAL) * 100) / 100; //acc.x * 2.0f / MEMS_ACC_MAXVAL;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <SysTick_Handler+0x180>)
 800085a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085e:	ee07 3a90 	vmov	s15, r3
 8000862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000866:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800086a:	eddf 6a34 	vldr	s13, [pc, #208]	; 800093c <SysTick_Handler+0x184>
 800086e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000872:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000940 <SysTick_Handler+0x188>
 8000876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800087a:	eeb0 0a67 	vmov.f32	s0, s15
 800087e:	f002 ff01 	bl	8003684 <floorf>
 8000882:	eeb0 7a40 	vmov.f32	s14, s0
 8000886:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8000940 <SysTick_Handler+0x188>
 800088a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <SysTick_Handler+0x18c>)
 8000890:	edc3 7a00 	vstr	s15, [r3]
		  y = floorf((acc.y * 2.0f / MEMS_ACC_MAXVAL) * 100) / 100; //acc.y * 2.0f / MEMS_ACC_MAXVAL;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <SysTick_Handler+0x180>)
 8000896:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80008a6:	eddf 6a25 	vldr	s13, [pc, #148]	; 800093c <SysTick_Handler+0x184>
 80008aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ae:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000940 <SysTick_Handler+0x188>
 80008b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b6:	eeb0 0a67 	vmov.f32	s0, s15
 80008ba:	f002 fee3 	bl	8003684 <floorf>
 80008be:	eeb0 7a40 	vmov.f32	s14, s0
 80008c2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000940 <SysTick_Handler+0x188>
 80008c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SysTick_Handler+0x190>)
 80008cc:	edc3 7a00 	vstr	s15, [r3]
		  z = floorf((acc.z * 2.0f / MEMS_ACC_MAXVAL) * 100) / 100; //acc.z * 2.0f / MEMS_ACC_MAXVAL;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <SysTick_Handler+0x180>)
 80008d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80008e2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800093c <SysTick_Handler+0x184>
 80008e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000940 <SysTick_Handler+0x188>
 80008ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f2:	eeb0 0a67 	vmov.f32	s0, s15
 80008f6:	f002 fec5 	bl	8003684 <floorf>
 80008fa:	eeb0 7a40 	vmov.f32	s14, s0
 80008fe:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000940 <SysTick_Handler+0x188>
 8000902:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <SysTick_Handler+0x194>)
 8000908:	edc3 7a00 	vstr	s15, [r3]
	  }
  }
  miliSec++;
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SysTick_Handler+0x168>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a03      	ldr	r2, [pc, #12]	; (8000920 <SysTick_Handler+0x168>)
 8000914:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000003c 	.word	0x2000003c
 8000924:	08003740 	.word	0x08003740
 8000928:	08003748 	.word	0x08003748
 800092c:	08003750 	.word	0x08003750
 8000930:	08003758 	.word	0x08003758
 8000934:	10624dd3 	.word	0x10624dd3
 8000938:	2000008c 	.word	0x2000008c
 800093c:	46fffe00 	.word	0x46fffe00
 8000940:	42c80000 	.word	0x42c80000
 8000944:	20000094 	.word	0x20000094
 8000948:	2000009c 	.word	0x2000009c
 800094c:	20000098 	.word	0x20000098

08000950 <inputHandling>:
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void inputHandling()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	buttonMs++;
 8000954:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <inputHandling+0x98>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <inputHandling+0x98>)
 800095c:	6013      	str	r3, [r2, #0]
	if(buttonMs < buttonDelay)
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <inputHandling+0x98>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <inputHandling+0x9c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	db3b      	blt.n	80009e2 <inputHandling+0x92>
		return;
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_RESET) // 	  JOY RIGHT, Y
 800096a:	2101      	movs	r1, #1
 800096c:	4820      	ldr	r0, [pc, #128]	; (80009f0 <inputHandling+0xa0>)
 800096e:	f000 fcff 	bl	8001370 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d109      	bne.n	800098c <inputHandling+0x3c>
	{
		showX = 0;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <inputHandling+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
		showY = 1;
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <inputHandling+0xa8>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
		showZ = 0;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <inputHandling+0xac>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	e020      	b.n	80009ce <inputHandling+0x7e>
	}
	else if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1) == GPIO_PIN_RESET) // JOY LEFT,  X
 800098c:	2102      	movs	r1, #2
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <inputHandling+0xa0>)
 8000990:	f000 fcee 	bl	8001370 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d109      	bne.n	80009ae <inputHandling+0x5e>
	{
		showX = 1;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <inputHandling+0xa4>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
		showY = 0;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <inputHandling+0xa8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
		showZ = 0;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <inputHandling+0xac>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e00f      	b.n	80009ce <inputHandling+0x7e>
	}
	else if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_RESET) // JOY DOWN,  Z
 80009ae:	2104      	movs	r1, #4
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <inputHandling+0xa0>)
 80009b2:	f000 fcdd 	bl	8001370 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d108      	bne.n	80009ce <inputHandling+0x7e>
	{
		showX = 0;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <inputHandling+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
		showY = 0;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <inputHandling+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
		showZ = 1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <inputHandling+0xac>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
	}
	if(buttonMs == buttonDelay)
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <inputHandling+0x98>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <inputHandling+0x9c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d104      	bne.n	80009e4 <inputHandling+0x94>
		buttonMs = 0;
 80009da:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <inputHandling+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	e000      	b.n	80009e4 <inputHandling+0x94>
		return;
 80009e2:	bf00      	nop

}
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000030 	.word	0x20000030
 80009ec:	20000000 	.word	0x20000000
 80009f0:	48001000 	.word	0x48001000
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000034 	.word	0x20000034
 80009fc:	20000038 	.word	0x20000038

08000a00 <makeDigitFromFloatValue>:

void makeDigitFromFloatValue(int pos, float input, int * digitToSet)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a0c:	6079      	str	r1, [r7, #4]
	if(input < 0)
 8000a0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a1a:	d505      	bpl.n	8000a28 <makeDigitFromFloatValue+0x28>
	{
		input *= -1;
 8000a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a20:	eef1 7a67 	vneg.f32	s15, s15
 8000a24:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	int number = input * 100;
 8000a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a2c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000abc <makeDigitFromFloatValue+0xbc>
 8000a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a38:	ee17 3a90 	vmov	r3, s15
 8000a3c:	617b      	str	r3, [r7, #20]
		else if(pos == 2)
			*digitToSet = 0;
		else
			*digitToSet = number % 10;
	}*/
	if(input < 100)
 8000a3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a42:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000abc <makeDigitFromFloatValue+0xbc>
 8000a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4e:	d400      	bmi.n	8000a52 <makeDigitFromFloatValue+0x52>
		}
		else
			*digitToSet = number % 10;
	}

}
 8000a50:	e02e      	b.n	8000ab0 <makeDigitFromFloatValue+0xb0>
		if(pos == 1)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d103      	bne.n	8000a60 <makeDigitFromFloatValue+0x60>
			*digitToSet = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	e027      	b.n	8000ab0 <makeDigitFromFloatValue+0xb0>
		else if(pos == 2)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d116      	bne.n	8000a94 <makeDigitFromFloatValue+0x94>
			number /= 10;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <makeDigitFromFloatValue+0xc0>)
 8000a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6e:	1092      	asrs	r2, r2, #2
 8000a70:	17db      	asrs	r3, r3, #31
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	617b      	str	r3, [r7, #20]
			*digitToSet = number % 10;
 8000a76:	6979      	ldr	r1, [r7, #20]
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <makeDigitFromFloatValue+0xc0>)
 8000a7a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a7e:	109a      	asrs	r2, r3, #2
 8000a80:	17cb      	asrs	r3, r1, #31
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	1aca      	subs	r2, r1, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
}
 8000a92:	e00d      	b.n	8000ab0 <makeDigitFromFloatValue+0xb0>
			*digitToSet = number % 10;
 8000a94:	6979      	ldr	r1, [r7, #20]
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <makeDigitFromFloatValue+0xc0>)
 8000a98:	fb83 2301 	smull	r2, r3, r3, r1
 8000a9c:	109a      	asrs	r2, r3, #2
 8000a9e:	17cb      	asrs	r3, r1, #31
 8000aa0:	1ad2      	subs	r2, r2, r3
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	1aca      	subs	r2, r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	371c      	adds	r7, #28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	42c80000 	.word	0x42c80000
 8000ac0:	66666667 	.word	0x66666667

08000ac4 <showDigit>:

void showDigit(const char * digitName)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f240 217f 	movw	r1, #639	; 0x27f
 8000ad2:	4886      	ldr	r0, [pc, #536]	; (8000cec <showDigit+0x228>)
 8000ad4:	f000 fc64 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	213c      	movs	r1, #60	; 0x3c
 8000adc:	4884      	ldr	r0, [pc, #528]	; (8000cf0 <showDigit+0x22c>)
 8000ade:	f000 fc5f 	bl	80013a0 <HAL_GPIO_WritePin>
	if(strcmp(digitName, "axis") == 0)
 8000ae2:	4984      	ldr	r1, [pc, #528]	; (8000cf4 <showDigit+0x230>)
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fb81 	bl	80001ec <strcmp>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d126      	bne.n	8000b3e <showDigit+0x7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2104      	movs	r1, #4
 8000af4:	487e      	ldr	r0, [pc, #504]	; (8000cf0 <showDigit+0x22c>)
 8000af6:	f000 fc53 	bl	80013a0 <HAL_GPIO_WritePin>
		if(showX)
 8000afa:	4b7f      	ldr	r3, [pc, #508]	; (8000cf8 <showDigit+0x234>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <showDigit+0x4c>
			HAL_GPIO_WritePin(GPIOG, tableOfSegments[1], GPIO_PIN_SET);
 8000b02:	2306      	movs	r3, #6
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	4878      	ldr	r0, [pc, #480]	; (8000cec <showDigit+0x228>)
 8000b0a:	f000 fc49 	bl	80013a0 <HAL_GPIO_WritePin>
		else if(showY)
			HAL_GPIO_WritePin(GPIOG, tableOfSegments[2], GPIO_PIN_SET);
		else if(showZ)
			HAL_GPIO_WritePin(GPIOG, tableOfSegments[3], GPIO_PIN_SET);
		return;
 8000b0e:	e0e8      	b.n	8000ce2 <showDigit+0x21e>
		else if(showY)
 8000b10:	4b7a      	ldr	r3, [pc, #488]	; (8000cfc <showDigit+0x238>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <showDigit+0x62>
			HAL_GPIO_WritePin(GPIOG, tableOfSegments[2], GPIO_PIN_SET);
 8000b18:	235b      	movs	r3, #91	; 0x5b
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4873      	ldr	r0, [pc, #460]	; (8000cec <showDigit+0x228>)
 8000b20:	f000 fc3e 	bl	80013a0 <HAL_GPIO_WritePin>
		return;
 8000b24:	e0dd      	b.n	8000ce2 <showDigit+0x21e>
		else if(showZ)
 8000b26:	4b76      	ldr	r3, [pc, #472]	; (8000d00 <showDigit+0x23c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 80d9 	beq.w	8000ce2 <showDigit+0x21e>
			HAL_GPIO_WritePin(GPIOG, tableOfSegments[3], GPIO_PIN_SET);
 8000b30:	234f      	movs	r3, #79	; 0x4f
 8000b32:	2201      	movs	r2, #1
 8000b34:	4619      	mov	r1, r3
 8000b36:	486d      	ldr	r0, [pc, #436]	; (8000cec <showDigit+0x228>)
 8000b38:	f000 fc32 	bl	80013a0 <HAL_GPIO_WritePin>
 8000b3c:	e0d2      	b.n	8000ce4 <showDigit+0x220>
	}
	int digitToShow;
	if(strcmp(digitName, "first") == 0)
 8000b3e:	4971      	ldr	r1, [pc, #452]	; (8000d04 <showDigit+0x240>)
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fb53 	bl	80001ec <strcmp>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d140      	bne.n	8000bce <showDigit+0x10a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2108      	movs	r1, #8
 8000b50:	4867      	ldr	r0, [pc, #412]	; (8000cf0 <showDigit+0x22c>)
 8000b52:	f000 fc25 	bl	80013a0 <HAL_GPIO_WritePin>
		if(showX)
 8000b56:	4b68      	ldr	r3, [pc, #416]	; (8000cf8 <showDigit+0x234>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <showDigit+0xb2>
			makeDigitFromFloatValue(1, x, &digitToShow);
 8000b5e:	4b6a      	ldr	r3, [pc, #424]	; (8000d08 <showDigit+0x244>)
 8000b60:	edd3 7a00 	vldr	s15, [r3]
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4619      	mov	r1, r3
 8000b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff ff46 	bl	8000a00 <makeDigitFromFloatValue>
 8000b74:	e01e      	b.n	8000bb4 <showDigit+0xf0>
		else if(showY)
 8000b76:	4b61      	ldr	r3, [pc, #388]	; (8000cfc <showDigit+0x238>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <showDigit+0xd2>
			makeDigitFromFloatValue(1, y, &digitToShow);
 8000b7e:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <showDigit+0x248>)
 8000b80:	edd3 7a00 	vldr	s15, [r3]
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff ff36 	bl	8000a00 <makeDigitFromFloatValue>
 8000b94:	e00e      	b.n	8000bb4 <showDigit+0xf0>
		else if(showZ)
 8000b96:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <showDigit+0x23c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00a      	beq.n	8000bb4 <showDigit+0xf0>
			makeDigitFromFloatValue(1, z, &digitToShow);
 8000b9e:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <showDigit+0x24c>)
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff ff26 	bl	8000a00 <makeDigitFromFloatValue>
		HAL_GPIO_WritePin(GPIOG, tableOfSegments[digitToShow] | GPIO_PIN_9, GPIO_PIN_SET);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4a57      	ldr	r2, [pc, #348]	; (8000d14 <showDigit+0x250>)
 8000bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4849      	ldr	r0, [pc, #292]	; (8000cec <showDigit+0x228>)
 8000bc8:	f000 fbea 	bl	80013a0 <HAL_GPIO_WritePin>
 8000bcc:	e08a      	b.n	8000ce4 <showDigit+0x220>

	}
	else if(strcmp(digitName, "second") == 0)
 8000bce:	4952      	ldr	r1, [pc, #328]	; (8000d18 <showDigit+0x254>)
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fb0b 	bl	80001ec <strcmp>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d13d      	bne.n	8000c58 <showDigit+0x194>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2110      	movs	r1, #16
 8000be0:	4843      	ldr	r0, [pc, #268]	; (8000cf0 <showDigit+0x22c>)
 8000be2:	f000 fbdd 	bl	80013a0 <HAL_GPIO_WritePin>
		if(showX)
 8000be6:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <showDigit+0x234>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00b      	beq.n	8000c06 <showDigit+0x142>
			makeDigitFromFloatValue(2, x, &digitToShow);
 8000bee:	4b46      	ldr	r3, [pc, #280]	; (8000d08 <showDigit+0x244>)
 8000bf0:	edd3 7a00 	vldr	s15, [r3]
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f7ff fefe 	bl	8000a00 <makeDigitFromFloatValue>
 8000c04:	e01e      	b.n	8000c44 <showDigit+0x180>
		else if(showY)
 8000c06:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <showDigit+0x238>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00b      	beq.n	8000c26 <showDigit+0x162>
			makeDigitFromFloatValue(2, y, &digitToShow);
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	; (8000d0c <showDigit+0x248>)
 8000c10:	edd3 7a00 	vldr	s15, [r3]
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff feee 	bl	8000a00 <makeDigitFromFloatValue>
 8000c24:	e00e      	b.n	8000c44 <showDigit+0x180>
		else if(showZ)
 8000c26:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <showDigit+0x23c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00a      	beq.n	8000c44 <showDigit+0x180>
			makeDigitFromFloatValue(2, z, &digitToShow);
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <showDigit+0x24c>)
 8000c30:	edd3 7a00 	vldr	s15, [r3]
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f7ff fede 	bl	8000a00 <makeDigitFromFloatValue>
		HAL_GPIO_WritePin(GPIOG, tableOfSegments[digitToShow], GPIO_PIN_SET);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4a33      	ldr	r2, [pc, #204]	; (8000d14 <showDigit+0x250>)
 8000c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4826      	ldr	r0, [pc, #152]	; (8000cec <showDigit+0x228>)
 8000c52:	f000 fba5 	bl	80013a0 <HAL_GPIO_WritePin>
 8000c56:	e045      	b.n	8000ce4 <showDigit+0x220>

	}
	else if(strcmp(digitName, "third") == 0)
 8000c58:	4930      	ldr	r1, [pc, #192]	; (8000d1c <showDigit+0x258>)
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff fac6 	bl	80001ec <strcmp>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d13e      	bne.n	8000ce4 <showDigit+0x220>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2120      	movs	r1, #32
 8000c6a:	4821      	ldr	r0, [pc, #132]	; (8000cf0 <showDigit+0x22c>)
 8000c6c:	f000 fb98 	bl	80013a0 <HAL_GPIO_WritePin>
		if(showX)
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <showDigit+0x234>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00b      	beq.n	8000c90 <showDigit+0x1cc>
			makeDigitFromFloatValue(3, x, &digitToShow);
 8000c78:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <showDigit+0x244>)
 8000c7a:	edd3 7a00 	vldr	s15, [r3]
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	eeb0 0a67 	vmov.f32	s0, s15
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f7ff feb9 	bl	8000a00 <makeDigitFromFloatValue>
 8000c8e:	e01e      	b.n	8000cce <showDigit+0x20a>
		else if(showY)
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <showDigit+0x238>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00b      	beq.n	8000cb0 <showDigit+0x1ec>
			makeDigitFromFloatValue(3, y, &digitToShow);
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <showDigit+0x248>)
 8000c9a:	edd3 7a00 	vldr	s15, [r3]
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff fea9 	bl	8000a00 <makeDigitFromFloatValue>
 8000cae:	e00e      	b.n	8000cce <showDigit+0x20a>
		else if(showZ)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <showDigit+0x23c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00a      	beq.n	8000cce <showDigit+0x20a>
			makeDigitFromFloatValue(3, z, &digitToShow);
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <showDigit+0x24c>)
 8000cba:	edd3 7a00 	vldr	s15, [r3]
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f7ff fe99 	bl	8000a00 <makeDigitFromFloatValue>
		HAL_GPIO_WritePin(GPIOG, tableOfSegments[digitToShow], GPIO_PIN_SET);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <showDigit+0x250>)
 8000cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <showDigit+0x228>)
 8000cdc:	f000 fb60 	bl	80013a0 <HAL_GPIO_WritePin>
 8000ce0:	e000      	b.n	8000ce4 <showDigit+0x220>
		return;
 8000ce2:	bf00      	nop

	}
}
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	48001800 	.word	0x48001800
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	08003740 	.word	0x08003740
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	20000034 	.word	0x20000034
 8000d00:	20000038 	.word	0x20000038
 8000d04:	08003748 	.word	0x08003748
 8000d08:	20000094 	.word	0x20000094
 8000d0c:	2000009c 	.word	0x2000009c
 8000d10:	20000098 	.word	0x20000098
 8000d14:	08003760 	.word	0x08003760
 8000d18:	08003750 	.word	0x08003750
 8000d1c:	08003758 	.word	0x08003758

08000d20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f002 fc5b 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d76:	f7ff fbf9 	bl	800056c <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d88:	080037bc 	.word	0x080037bc
  ldr r2, =_sbss
 8000d8c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d90:	200000a4 	.word	0x200000a4

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>

08000d96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f91f 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f80e 	bl	8000dc8 <HAL_InitTick>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	e001      	b.n	8000dbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db8:	f7ff fcb6 	bl	8000728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_InitTick+0x6c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d023      	beq.n	8000e24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_InitTick+0x70>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_InitTick+0x6c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f91d 	bl	8001032 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10f      	bne.n	8000e1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d809      	bhi.n	8000e18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e0c:	f000 f8f5 	bl	8000ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_InitTick+0x74>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e007      	b.n	8000e28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e004      	b.n	8000e28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	e001      	b.n	8000e28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000010 	.word	0x20000010
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	2000000c 	.word	0x2000000c

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000010 	.word	0x20000010
 8000e64:	200000a0 	.word	0x200000a0

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200000a0 	.word	0x200000a0

08000e80 <__NVIC_SetPriorityGrouping>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_SetPriority>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff47 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff5c 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffb0 	bl	8000fa0 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e166      	b.n	800132a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8158 	beq.w	8001324 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b01      	cmp	r3, #1
 800107e:	d005      	beq.n	800108c <HAL_GPIO_Init+0x40>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d130      	bne.n	80010ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010c2:	2201      	movs	r2, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	f003 0201 	and.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d017      	beq.n	800112a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d123      	bne.n	800117e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	6939      	ldr	r1, [r7, #16]
 800117a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0203 	and.w	r2, r3, #3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 80b2 	beq.w	8001324 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c0:	4b61      	ldr	r3, [pc, #388]	; (8001348 <HAL_GPIO_Init+0x2fc>)
 80011c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c4:	4a60      	ldr	r2, [pc, #384]	; (8001348 <HAL_GPIO_Init+0x2fc>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6613      	str	r3, [r2, #96]	; 0x60
 80011cc:	4b5e      	ldr	r3, [pc, #376]	; (8001348 <HAL_GPIO_Init+0x2fc>)
 80011ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011d8:	4a5c      	ldr	r2, [pc, #368]	; (800134c <HAL_GPIO_Init+0x300>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001202:	d02b      	beq.n	800125c <HAL_GPIO_Init+0x210>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_GPIO_Init+0x304>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d025      	beq.n	8001258 <HAL_GPIO_Init+0x20c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a51      	ldr	r2, [pc, #324]	; (8001354 <HAL_GPIO_Init+0x308>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d01f      	beq.n	8001254 <HAL_GPIO_Init+0x208>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x30c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d019      	beq.n	8001250 <HAL_GPIO_Init+0x204>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x310>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_GPIO_Init+0x200>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x314>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_Init+0x1fc>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x318>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x1f8>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x31c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_Init+0x1f4>
 800123c:	2307      	movs	r3, #7
 800123e:	e00e      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001240:	2308      	movs	r3, #8
 8001242:	e00c      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001244:	2306      	movs	r3, #6
 8001246:	e00a      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001248:	2305      	movs	r3, #5
 800124a:	e008      	b.n	800125e <HAL_GPIO_Init+0x212>
 800124c:	2304      	movs	r3, #4
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001250:	2303      	movs	r3, #3
 8001252:	e004      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <HAL_GPIO_Init+0x212>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_GPIO_Init+0x212>
 800125c:	2300      	movs	r3, #0
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	f002 0203 	and.w	r2, r2, #3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	4093      	lsls	r3, r2
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126e:	4937      	ldr	r1, [pc, #220]	; (800134c <HAL_GPIO_Init+0x300>)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800127c:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_GPIO_Init+0x320>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012a0:	4a32      	ldr	r2, [pc, #200]	; (800136c <HAL_GPIO_Init+0x320>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <HAL_GPIO_Init+0x320>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ca:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_GPIO_Init+0x320>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_GPIO_Init+0x320>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_GPIO_Init+0x320>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <HAL_GPIO_Init+0x320>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_GPIO_Init+0x320>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	f47f ae91 	bne.w	800105c <HAL_GPIO_Init+0x10>
  }
}
 800133a:	bf00      	nop
 800133c:	bf00      	nop
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	48000400 	.word	0x48000400
 8001354:	48000800 	.word	0x48000800
 8001358:	48000c00 	.word	0x48000c00
 800135c:	48001000 	.word	0x48001000
 8001360:	48001400 	.word	0x48001400
 8001364:	48001800 	.word	0x48001800
 8001368:	48001c00 	.word	0x48001c00
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4013      	ands	r3, r2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e001      	b.n	8001392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e081      	b.n	80014e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff f83c 	bl	8000474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001420:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001430:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d107      	bne.n	800144a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e006      	b.n	8001458 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001456:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d104      	bne.n	800146a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001468:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800147c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800148c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69d9      	ldr	r1, [r3, #28]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1a      	ldr	r2, [r3, #32]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2220      	movs	r2, #32
 80014d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	460b      	mov	r3, r1
 8001504:	813b      	strh	r3, [r7, #8]
 8001506:	4613      	mov	r3, r2
 8001508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b20      	cmp	r3, #32
 8001514:	f040 80f9 	bne.w	800170a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_I2C_Mem_Write+0x34>
 800151e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0ed      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_I2C_Mem_Write+0x4e>
 800153a:	2302      	movs	r3, #2
 800153c:	e0e6      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001546:	f7ff fc8f 	bl	8000e68 <HAL_GetTick>
 800154a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2319      	movs	r3, #25
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 fac3 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0d1      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2221      	movs	r2, #33	; 0x21
 800156c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a3a      	ldr	r2, [r7, #32]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001590:	88f8      	ldrh	r0, [r7, #6]
 8001592:	893a      	ldrh	r2, [r7, #8]
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4603      	mov	r3, r0
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f9d3 	bl	800194c <I2C_RequestMemoryWrite>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0a9      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2bff      	cmp	r3, #255	; 0xff
 80015c0:	d90e      	bls.n	80015e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	22ff      	movs	r2, #255	; 0xff
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fc2b 	bl	8001e34 <I2C_TransferConfig>
 80015de:	e00f      	b.n	8001600 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	8979      	ldrh	r1, [r7, #10]
 80015f2:	2300      	movs	r3, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fc1a 	bl	8001e34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 faad 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e07b      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d034      	beq.n	80016b8 <HAL_I2C_Mem_Write+0x1c8>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001652:	2b00      	cmp	r3, #0
 8001654:	d130      	bne.n	80016b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	2200      	movs	r2, #0
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fa3f 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e04d      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001674:	b29b      	uxth	r3, r3
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d90e      	bls.n	8001698 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	22ff      	movs	r2, #255	; 0xff
 800167e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001684:	b2da      	uxtb	r2, r3
 8001686:	8979      	ldrh	r1, [r7, #10]
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 fbcf 	bl	8001e34 <I2C_TransferConfig>
 8001696:	e00f      	b.n	80016b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fbbe 	bl	8001e34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d19e      	bne.n	8001600 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fa8c 	bl	8001be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e01a      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2220      	movs	r2, #32
 80016dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_I2C_Mem_Write+0x224>)
 80016ea:	400b      	ands	r3, r1
 80016ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800170a:	2302      	movs	r3, #2
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	fe00e800 	.word	0xfe00e800

08001718 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	817b      	strh	r3, [r7, #10]
 800172a:	460b      	mov	r3, r1
 800172c:	813b      	strh	r3, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b20      	cmp	r3, #32
 800173c:	f040 80fd 	bne.w	800193a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_I2C_Mem_Read+0x34>
 8001746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001752:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0f1      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_I2C_Mem_Read+0x4e>
 8001762:	2302      	movs	r3, #2
 8001764:	e0ea      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800176e:	f7ff fb7b 	bl	8000e68 <HAL_GetTick>
 8001772:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2319      	movs	r3, #25
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f9af 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0d5      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2222      	movs	r2, #34	; 0x22
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017b8:	88f8      	ldrh	r0, [r7, #6]
 80017ba:	893a      	ldrh	r2, [r7, #8]
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	4603      	mov	r3, r0
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f913 	bl	80019f4 <I2C_RequestMemoryRead>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0ad      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d90e      	bls.n	8001808 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	22ff      	movs	r2, #255	; 0xff
 80017ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	8979      	ldrh	r1, [r7, #10]
 80017f8:	4b52      	ldr	r3, [pc, #328]	; (8001944 <HAL_I2C_Mem_Read+0x22c>)
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fb17 	bl	8001e34 <I2C_TransferConfig>
 8001806:	e00f      	b.n	8001828 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	b2da      	uxtb	r2, r3
 8001818:	8979      	ldrh	r1, [r7, #10]
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <HAL_I2C_Mem_Read+0x22c>)
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fb06 	bl	8001e34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182e:	2200      	movs	r2, #0
 8001830:	2104      	movs	r1, #4
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f956 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07c      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186a:	b29b      	uxth	r3, r3
 800186c:	3b01      	subs	r3, #1
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d034      	beq.n	80018e8 <HAL_I2C_Mem_Read+0x1d0>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001882:	2b00      	cmp	r3, #0
 8001884:	d130      	bne.n	80018e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	2200      	movs	r2, #0
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f927 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e04d      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d90e      	bls.n	80018c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	22ff      	movs	r2, #255	; 0xff
 80018ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	8979      	ldrh	r1, [r7, #10]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fab7 	bl	8001e34 <I2C_TransferConfig>
 80018c6:	e00f      	b.n	80018e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 faa6 	bl	8001e34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d19a      	bne.n	8001828 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f974 	bl	8001be4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e01a      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2220      	movs	r2, #32
 800190c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_I2C_Mem_Read+0x230>)
 800191a:	400b      	ands	r3, r1
 800191c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800193a:	2302      	movs	r3, #2
  }
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	80002400 	.word	0x80002400
 8001948:	fe00e800 	.word	0xfe00e800

0800194c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4603      	mov	r3, r0
 800195c:	817b      	strh	r3, [r7, #10]
 800195e:	460b      	mov	r3, r1
 8001960:	813b      	strh	r3, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	8979      	ldrh	r1, [r7, #10]
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <I2C_RequestMemoryWrite+0xa4>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fa5d 	bl	8001e34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	69b9      	ldr	r1, [r7, #24]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f8f0 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e02c      	b.n	80019e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001994:	893b      	ldrh	r3, [r7, #8]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
 800199e:	e015      	b.n	80019cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f8d6 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e012      	b.n	80019e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019c2:	893b      	ldrh	r3, [r7, #8]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2200      	movs	r2, #0
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 f884 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	80002000 	.word	0x80002000

080019f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	817b      	strh	r3, [r7, #10]
 8001a06:	460b      	mov	r3, r1
 8001a08:	813b      	strh	r3, [r7, #8]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	8979      	ldrh	r1, [r7, #10]
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <I2C_RequestMemoryRead+0xa4>)
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fa0a 	bl	8001e34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f89d 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e02c      	b.n	8001a8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d105      	bne.n	8001a46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a3a:	893b      	ldrh	r3, [r7, #8]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
 8001a44:	e015      	b.n	8001a72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a46:	893b      	ldrh	r3, [r7, #8]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 f883 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e012      	b.n	8001a8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a68:	893b      	ldrh	r3, [r7, #8]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f831 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	80002000 	.word	0x80002000

08001a9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d103      	bne.n	8001aba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d007      	beq.n	8001ad8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699a      	ldr	r2, [r3, #24]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	619a      	str	r2, [r3, #24]
  }
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af4:	e022      	b.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001afc:	d01e      	beq.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afe:	f7ff f9b3 	bl	8000e68 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d302      	bcc.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d113      	bne.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f043 0220 	orr.w	r2, r3, #32
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e00f      	b.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4013      	ands	r3, r2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d0cd      	beq.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b70:	e02c      	b.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 f870 	bl	8001c5c <I2C_IsErrorOccurred>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e02a      	b.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b8c:	d01e      	beq.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8e:	f7ff f96b 	bl	8000e68 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d302      	bcc.n	8001ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d113      	bne.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f043 0220 	orr.w	r2, r3, #32
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e007      	b.n	8001bdc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d1cb      	bne.n	8001b72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf0:	e028      	b.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f830 	bl	8001c5c <I2C_IsErrorOccurred>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e026      	b.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c06:	f7ff f92f 	bl	8000e68 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d113      	bne.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e007      	b.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d1cf      	bne.n	8001bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d075      	beq.n	8001d74 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c90:	e056      	b.n	8001d40 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c98:	d052      	beq.n	8001d40 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c9a:	f7ff f8e5 	bl	8000e68 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d302      	bcc.n	8001cb0 <I2C_IsErrorOccurred+0x54>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d147      	bne.n	8001d40 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd2:	d12e      	bne.n	8001d32 <I2C_IsErrorOccurred+0xd6>
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cda:	d02a      	beq.n	8001d32 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001cdc:	7cfb      	ldrb	r3, [r7, #19]
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d027      	beq.n	8001d32 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cf0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001cf2:	f7ff f8b9 	bl	8000e68 <HAL_GetTick>
 8001cf6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cf8:	e01b      	b.n	8001d32 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cfa:	f7ff f8b5 	bl	8000e68 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b19      	cmp	r3, #25
 8001d06:	d914      	bls.n	8001d32 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f043 0220 	orr.w	r2, r3, #32
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d1dc      	bne.n	8001cfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	d003      	beq.n	8001d56 <I2C_IsErrorOccurred+0xfa>
 8001d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d09d      	beq.n	8001c92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2220      	movs	r2, #32
 8001d64:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f043 0308 	orr.w	r3, r3, #8
 8001dae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01c      	beq.n	8001e24 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff fe56 	bl	8001a9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <I2C_IsErrorOccurred+0x1d4>)
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3728      	adds	r7, #40	; 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	fe00e800 	.word	0xfe00e800

08001e34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	817b      	strh	r3, [r7, #10]
 8001e42:	4613      	mov	r3, r2
 8001e44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e4c:	7a7b      	ldrb	r3, [r7, #9]
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e54:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e62:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	0d5b      	lsrs	r3, r3, #21
 8001e6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <I2C_TransferConfig+0x60>)
 8001e74:	430b      	orrs	r3, r1
 8001e76:	43db      	mvns	r3, r3
 8001e78:	ea02 0103 	and.w	r1, r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	03ff63ff 	.word	0x03ff63ff

08001e98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d138      	bne.n	8001f20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e032      	b.n	8001f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e000      	b.n	8001f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
  }
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d139      	bne.n	8001fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e033      	b.n	8001fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2224      	movs	r2, #36	; 0x24
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff2:	d130      	bne.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002000:	d038      	beq.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800200a:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2232      	movs	r2, #50	; 0x32
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0c9b      	lsrs	r3, r3, #18
 8002024:	3301      	adds	r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002028:	e002      	b.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3b01      	subs	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002030:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203c:	d102      	bne.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x60>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f2      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002050:	d110      	bne.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e00f      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d007      	beq.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206c:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002072:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40007000 	.word	0x40007000
 8002088:	20000008 	.word	0x20000008
 800208c:	431bde83 	.word	0x431bde83

08002090 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	6053      	str	r3, [r2, #4]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	f000 bc16 	b.w	80028f0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c4:	4ba0      	ldr	r3, [pc, #640]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ce:	4b9e      	ldr	r3, [pc, #632]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80e4 	beq.w	80022ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_RCC_OscConfig+0x4c>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	f040 808b 	bne.w	800220a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	f040 8087 	bne.w	800220a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fc:	4b92      	ldr	r3, [pc, #584]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x64>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e3ed      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_RCC_OscConfig+0x7e>
 8002124:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212c:	e005      	b.n	800213a <HAL_RCC_OscConfig+0x8a>
 800212e:	4b86      	ldr	r3, [pc, #536]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213a:	4293      	cmp	r3, r2
 800213c:	d223      	bcs.n	8002186 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fd48 	bl	8002bd8 <RCC_SetFlashLatencyFromMSIRange>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e3ce      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002152:	4b7d      	ldr	r3, [pc, #500]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7c      	ldr	r2, [pc, #496]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b7a      	ldr	r3, [pc, #488]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4977      	ldr	r1, [pc, #476]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	4972      	ldr	r1, [pc, #456]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
 8002184:	e025      	b.n	80021d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002186:	4b70      	ldr	r3, [pc, #448]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6f      	ldr	r2, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	496a      	ldr	r1, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a4:	4b68      	ldr	r3, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	4965      	ldr	r1, [pc, #404]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fd08 	bl	8002bd8 <RCC_SetFlashLatencyFromMSIRange>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e38e      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d2:	f000 fc75 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	495a      	ldr	r1, [pc, #360]	; (800234c <HAL_RCC_OscConfig+0x29c>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a58      	ldr	r2, [pc, #352]	; (8002350 <HAL_RCC_OscConfig+0x2a0>)
 80021f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021f2:	4b58      	ldr	r3, [pc, #352]	; (8002354 <HAL_RCC_OscConfig+0x2a4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fde6 	bl	8000dc8 <HAL_InitTick>
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d052      	beq.n	80022ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	e372      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d032      	beq.n	8002278 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002212:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221e:	f7fe fe23 	bl	8000e68 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002226:	f7fe fe1f 	bl	8000e68 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e35b      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800224a:	f043 0308 	orr.w	r3, r3, #8
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	493a      	ldr	r1, [pc, #232]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	4935      	ldr	r1, [pc, #212]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
 8002276:	e01a      	b.n	80022ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002278:	4b33      	ldr	r3, [pc, #204]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a32      	ldr	r2, [pc, #200]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002284:	f7fe fdf0 	bl	8000e68 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228c:	f7fe fdec 	bl	8000e68 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e328      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1dc>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d073      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d005      	beq.n	80022cc <HAL_RCC_OscConfig+0x21c>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d10e      	bne.n	80022e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d063      	beq.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d15f      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e305      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x24c>
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0x288>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x270>
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0x288>
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a08      	ldr	r2, [pc, #32]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a05      	ldr	r2, [pc, #20]	; (8002348 <HAL_RCC_OscConfig+0x298>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fd92 	bl	8000e68 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	e010      	b.n	800236a <HAL_RCC_OscConfig+0x2ba>
 8002348:	40021000 	.word	0x40021000
 800234c:	08003774 	.word	0x08003774
 8002350:	20000008 	.word	0x20000008
 8002354:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fd86 	bl	8000e68 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e2c2      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	4baf      	ldr	r3, [pc, #700]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x2a8>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fd76 	bl	8000e68 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fd72 	bl	8000e68 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e2ae      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	4ba5      	ldr	r3, [pc, #660]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x2d0>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d060      	beq.n	8002470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_OscConfig+0x310>
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d119      	bne.n	80023ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d116      	bne.n	80023ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	4b99      	ldr	r3, [pc, #612]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_OscConfig+0x328>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e28b      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b93      	ldr	r3, [pc, #588]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	4990      	ldr	r1, [pc, #576]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ec:	e040      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d023      	beq.n	800243e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f6:	4b8c      	ldr	r3, [pc, #560]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a8b      	ldr	r2, [pc, #556]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe fd31 	bl	8000e68 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240a:	f7fe fd2d 	bl	8000e68 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e269      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	4b82      	ldr	r3, [pc, #520]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	497c      	ldr	r1, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e018      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243e:	4b7a      	ldr	r3, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a79      	ldr	r2, [pc, #484]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fd0d 	bl	8000e68 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe fd09 	bl	8000e68 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e245      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002464:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002484:	4b68      	ldr	r3, [pc, #416]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	4a67      	ldr	r2, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fce8 	bl	8000e68 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fce4 	bl	8000e68 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e220      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ae:	4b5e      	ldr	r3, [pc, #376]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ef      	beq.n	800249c <HAL_RCC_OscConfig+0x3ec>
 80024bc:	e01b      	b.n	80024f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b5a      	ldr	r3, [pc, #360]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe fccb 	bl	8000e68 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7fe fcc7 	bl	8000e68 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e203      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ef      	bne.n	80024d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a6 	beq.w	8002650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002508:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b44      	ldr	r3, [pc, #272]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a43      	ldr	r2, [pc, #268]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252c:	2301      	movs	r3, #1
 800252e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002530:	4b3e      	ldr	r3, [pc, #248]	; (800262c <HAL_RCC_OscConfig+0x57c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d118      	bne.n	800256e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253c:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_RCC_OscConfig+0x57c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a3a      	ldr	r2, [pc, #232]	; (800262c <HAL_RCC_OscConfig+0x57c>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002548:	f7fe fc8e 	bl	8000e68 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002550:	f7fe fc8a 	bl	8000e68 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1c6      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_RCC_OscConfig+0x57c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x4d8>
 8002576:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002586:	e024      	b.n	80025d2 <HAL_RCC_OscConfig+0x522>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d110      	bne.n	80025b2 <HAL_RCC_OscConfig+0x502>
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b0:	e00f      	b.n	80025d2 <HAL_RCC_OscConfig+0x522>
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80025ca:	f023 0304 	bic.w	r3, r3, #4
 80025ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d016      	beq.n	8002608 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025da:	f7fe fc45 	bl	8000e68 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe fc41 	bl	8000e68 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e17b      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x578>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ed      	beq.n	80025e2 <HAL_RCC_OscConfig+0x532>
 8002606:	e01a      	b.n	800263e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe fc2e 	bl	8000e68 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800260e:	e00f      	b.n	8002630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fe fc2a 	bl	8000e68 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d906      	bls.n	8002630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e164      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002630:	4ba8      	ldr	r3, [pc, #672]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e8      	bne.n	8002610 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263e:	7ffb      	ldrb	r3, [r7, #31]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4ba3      	ldr	r3, [pc, #652]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	4aa2      	ldr	r2, [pc, #648]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002664:	4b9b      	ldr	r3, [pc, #620]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266a:	4a9a      	ldr	r2, [pc, #616]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fbf8 	bl	8000e68 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800267c:	f7fe fbf4 	bl	8000e68 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e130      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800268e:	4b91      	ldr	r3, [pc, #580]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x5cc>
 800269c:	e01b      	b.n	80026d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800269e:	4b8d      	ldr	r3, [pc, #564]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80026a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a4:	4a8b      	ldr	r2, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe fbdb 	bl	8000e68 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b6:	f7fe fbd7 	bl	8000e68 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e113      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c8:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80026ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8107 	beq.w	80028ee <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	f040 80cb 	bne.w	8002880 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d12c      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	3b01      	subs	r3, #1
 800270a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d123      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d11b      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d113      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	3b01      	subs	r3, #1
 800273e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d109      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	3b01      	subs	r3, #1
 8002752:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d06d      	beq.n	8002834 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d068      	beq.n	8002830 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800275e:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800276a:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0ba      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800277a:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a55      	ldr	r2, [pc, #340]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002784:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002786:	f7fe fb6f 	bl	8000e68 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe fb6b 	bl	8000e68 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0a7      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a0:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ac:	4b49      	ldr	r3, [pc, #292]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_RCC_OscConfig+0x828>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027bc:	3a01      	subs	r2, #1
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027c6:	0212      	lsls	r2, r2, #8
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027ce:	0852      	lsrs	r2, r2, #1
 80027d0:	3a01      	subs	r2, #1
 80027d2:	0552      	lsls	r2, r2, #21
 80027d4:	4311      	orrs	r1, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027da:	0852      	lsrs	r2, r2, #1
 80027dc:	3a01      	subs	r2, #1
 80027de:	0652      	lsls	r2, r2, #25
 80027e0:	4311      	orrs	r1, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027e6:	06d2      	lsls	r2, r2, #27
 80027e8:	430a      	orrs	r2, r1
 80027ea:	493a      	ldr	r1, [pc, #232]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a37      	ldr	r2, [pc, #220]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002808:	f7fe fb2e 	bl	8000e68 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe fb2a 	bl	8000e68 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e066      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282e:	e05e      	b.n	80028ee <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e05d      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d156      	bne.n	80028ee <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a23      	ldr	r2, [pc, #140]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a20      	ldr	r2, [pc, #128]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002858:	f7fe fb06 	bl	8000e68 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fb02 	bl	8000e68 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e03e      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002872:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x7b0>
 800287e:	e036      	b.n	80028ee <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d031      	beq.n	80028ea <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 800288c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002890:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80028a4:	f023 0303 	bic.w	r3, r3, #3
 80028a8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_OscConfig+0x824>)
 80028b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fad5 	bl	8000e68 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c0:	e00c      	b.n	80028dc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fad1 	bl	8000e68 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d905      	bls.n	80028dc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e00d      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCC_OscConfig+0x848>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ec      	bne.n	80028c2 <HAL_RCC_OscConfig+0x812>
 80028e8:	e001      	b.n	80028ee <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0c8      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_RCC_ClockConfig+0x1b0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d910      	bls.n	8002940 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_ClockConfig+0x1b0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 0207 	bic.w	r2, r3, #7
 8002926:	4961      	ldr	r1, [pc, #388]	; (8002aac <HAL_RCC_ClockConfig+0x1b0>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b5f      	ldr	r3, [pc, #380]	; (8002aac <HAL_RCC_ClockConfig+0x1b0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d04c      	beq.n	80029e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d107      	bne.n	8002964 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002954:	4b56      	ldr	r3, [pc, #344]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d121      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e09e      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d107      	bne.n	800297c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d115      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e092      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002984:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d109      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e086      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e07e      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 0203 	bic.w	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	493f      	ldr	r1, [pc, #252]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b6:	f7fe fa57 	bl	8000e68 <HAL_GetTick>
 80029ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029be:	f7fe fa53 	bl	8000e68 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e066      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d4:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 020c 	and.w	r2, r3, #12
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d1eb      	bne.n	80029be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f2:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	492c      	ldr	r1, [pc, #176]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_ClockConfig+0x1b0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d210      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCC_ClockConfig+0x1b0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4924      	ldr	r1, [pc, #144]	; (8002aac <HAL_RCC_ClockConfig+0x1b0>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_RCC_ClockConfig+0x1b0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e036      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4918      	ldr	r1, [pc, #96]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4910      	ldr	r1, [pc, #64]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a72:	f000 f825 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe f996 	bl	8000dc8 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08003774 	.word	0x08003774
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	2000000c 	.word	0x2000000c

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ace:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d121      	bne.n	8002b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d11e      	bne.n	8002b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002af4:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b00:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e005      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b1c:	4a2b      	ldr	r2, [pc, #172]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d102      	bne.n	8002b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	e004      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d134      	bne.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d003      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0xac>
 8002b64:	e005      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b68:	617b      	str	r3, [r7, #20]
      break;
 8002b6a:	e005      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b6e:	617b      	str	r3, [r7, #20]
      break;
 8002b70:	e002      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	617b      	str	r3, [r7, #20]
      break;
 8002b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	3301      	adds	r3, #1
 8002b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	fb02 f203 	mul.w	r2, r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	0e5b      	lsrs	r3, r3, #25
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08003784 	.word	0x08003784
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	007a1200 	.word	0x007a1200

08002bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf0:	f7ff f9ea 	bl	8001fc8 <HAL_PWREx_GetVoltageRange>
 8002bf4:	6178      	str	r0, [r7, #20]
 8002bf6:	e014      	b.n	8002c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c02:	6593      	str	r3, [r2, #88]	; 0x58
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c10:	f7ff f9da 	bl	8001fc8 <HAL_PWREx_GetVoltageRange>
 8002c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c28:	d10b      	bne.n	8002c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d919      	bls.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2ba0      	cmp	r3, #160	; 0xa0
 8002c34:	d902      	bls.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c36:	2302      	movs	r3, #2
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e013      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	e010      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b80      	cmp	r3, #128	; 0x80
 8002c46:	d902      	bls.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c48:	2303      	movs	r3, #3
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	e00a      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d102      	bne.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c54:	2302      	movs	r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	e004      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b70      	cmp	r3, #112	; 0x70
 8002c5e:	d101      	bne.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c60:	2301      	movs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 0207 	bic.w	r2, r3, #7
 8002c6c:	4909      	ldr	r1, [pc, #36]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d001      	beq.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40022000 	.word	0x40022000

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d041      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cbc:	d02a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cc2:	d824      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cce:	d81e      	bhi.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd8:	d010      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cda:	e018      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cdc:	4b86      	ldr	r3, [pc, #536]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a85      	ldr	r2, [pc, #532]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ce8:	e015      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 facd 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cfa:	e00c      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3320      	adds	r3, #32
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fbb6 	bl	8003474 <RCCEx_PLLSAI2_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0c:	e003      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	74fb      	strb	r3, [r7, #19]
      break;
 8002d12:	e000      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d1c:	4b76      	ldr	r3, [pc, #472]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d2a:	4973      	ldr	r1, [pc, #460]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d32:	e001      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d041      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d4c:	d02a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d52:	d824      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d5e:	d81e      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d68:	d010      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d6a:	e018      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d6c:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a61      	ldr	r2, [pc, #388]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d78:	e015      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fa85 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8002d86:	4603      	mov	r3, r0
 8002d88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d8a:	e00c      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3320      	adds	r3, #32
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fb6e 	bl	8003474 <RCCEx_PLLSAI2_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d9c:	e003      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	74fb      	strb	r3, [r7, #19]
      break;
 8002da2:	e000      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002da6:	7cfb      	ldrb	r3, [r7, #19]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10b      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dac:	4b52      	ldr	r3, [pc, #328]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dba:	494f      	ldr	r1, [pc, #316]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dc2:	e001      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a0 	beq.w	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002dea:	2300      	movs	r3, #0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00d      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002dfc:	4b3e      	ldr	r3, [pc, #248]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e18:	f7fe f826 	bl	8000e68 <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e1e:	e009      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e20:	f7fe f822 	bl	8000e68 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	74fb      	strb	r3, [r7, #19]
        break;
 8002e32:	e005      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e34:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ef      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d15c      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e46:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01f      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d019      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e64:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fd ffe1 	bl	8000e68 <HAL_GetTick>
 8002ea6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fd ffdd 	bl	8000e68 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d902      	bls.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	74fb      	strb	r3, [r7, #19]
            break;
 8002ec0:	e006      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ec      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002eee:	e009      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
 8002ef4:	e006      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f04:	7c7b      	ldrb	r3, [r7, #17]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4ba6      	ldr	r3, [pc, #664]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	4aa5      	ldr	r2, [pc, #660]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f22:	4ba0      	ldr	r3, [pc, #640]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f023 0203 	bic.w	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	499c      	ldr	r1, [pc, #624]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f44:	4b97      	ldr	r3, [pc, #604]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f023 020c 	bic.w	r2, r3, #12
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	4994      	ldr	r1, [pc, #592]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f66:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	498b      	ldr	r1, [pc, #556]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f88:	4b86      	ldr	r3, [pc, #536]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4983      	ldr	r1, [pc, #524]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002faa:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb8:	497a      	ldr	r1, [pc, #488]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fcc:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	4972      	ldr	r1, [pc, #456]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fee:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	4969      	ldr	r1, [pc, #420]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003010:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301e:	4961      	ldr	r1, [pc, #388]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003032:	4b5c      	ldr	r3, [pc, #368]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003040:	4958      	ldr	r1, [pc, #352]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	4950      	ldr	r1, [pc, #320]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003076:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	4947      	ldr	r1, [pc, #284]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003098:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800309a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	493f      	ldr	r1, [pc, #252]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d028      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030ba:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4936      	ldr	r1, [pc, #216]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d8:	d106      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030da:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e4:	60d3      	str	r3, [r2, #12]
 80030e6:	e011      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030f0:	d10c      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f8c9 	bl	8003290 <RCCEx_PLLSAI1_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d028      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003118:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003126:	491f      	ldr	r1, [pc, #124]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003136:	d106      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800313e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003142:	60d3      	str	r3, [r2, #12]
 8003144:	e011      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314e:	d10c      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f89a 	bl	8003290 <RCCEx_PLLSAI1_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d02a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003184:	4907      	ldr	r1, [pc, #28]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003194:	d108      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003196:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4a02      	ldr	r2, [pc, #8]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800319c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031a0:	60d3      	str	r3, [r2, #12]
 80031a2:	e013      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80031a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2101      	movs	r1, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f869 	bl	8003290 <RCCEx_PLLSAI1_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02f      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e6:	4929      	ldr	r1, [pc, #164]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f6:	d10d      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	2102      	movs	r1, #2
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f846 	bl	8003290 <RCCEx_PLLSAI1_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d014      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	74bb      	strb	r3, [r7, #18]
 8003212:	e011      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321c:	d10c      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3320      	adds	r3, #32
 8003222:	2102      	movs	r1, #2
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f925 	bl	8003474 <RCCEx_PLLSAI2_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003254:	490d      	ldr	r1, [pc, #52]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003278:	4904      	ldr	r1, [pc, #16]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003280:	7cbb      	ldrb	r3, [r7, #18]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000

08003290 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800329e:	4b74      	ldr	r3, [pc, #464]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d018      	beq.n	80032dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032aa:	4b71      	ldr	r3, [pc, #452]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0203 	and.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10d      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
       ||
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032c2:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
       ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d047      	beq.n	8003366 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	e044      	b.n	8003366 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d018      	beq.n	8003316 <RCCEx_PLLSAI1_Config+0x86>
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d825      	bhi.n	8003334 <RCCEx_PLLSAI1_Config+0xa4>
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d002      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0x62>
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d009      	beq.n	8003304 <RCCEx_PLLSAI1_Config+0x74>
 80032f0:	e020      	b.n	8003334 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11d      	bne.n	800333a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003302:	e01a      	b.n	800333a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003304:	4b5a      	ldr	r3, [pc, #360]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330c:	2b00      	cmp	r3, #0
 800330e:	d116      	bne.n	800333e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003314:	e013      	b.n	800333e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003316:	4b56      	ldr	r3, [pc, #344]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003322:	4b53      	ldr	r3, [pc, #332]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003332:	e006      	b.n	8003342 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	e004      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800333a:	bf00      	nop
 800333c:	e002      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800333e:	bf00      	nop
 8003340:	e000      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003342:	bf00      	nop
    }

    if(status == HAL_OK)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10d      	bne.n	8003366 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	430b      	orrs	r3, r1
 8003360:	4943      	ldr	r1, [pc, #268]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d17c      	bne.n	8003466 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800336c:	4b40      	ldr	r3, [pc, #256]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3f      	ldr	r2, [pc, #252]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003378:	f7fd fd76 	bl	8000e68 <HAL_GetTick>
 800337c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800337e:	e009      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003380:	f7fd fd72 	bl	8000e68 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d902      	bls.n	8003394 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	73fb      	strb	r3, [r7, #15]
        break;
 8003392:	e005      	b.n	80033a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003394:	4b36      	ldr	r3, [pc, #216]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ef      	bne.n	8003380 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d15f      	bne.n	8003466 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d110      	bne.n	80033ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80033b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6892      	ldr	r2, [r2, #8]
 80033bc:	0211      	lsls	r1, r2, #8
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68d2      	ldr	r2, [r2, #12]
 80033c2:	06d2      	lsls	r2, r2, #27
 80033c4:	430a      	orrs	r2, r1
 80033c6:	492a      	ldr	r1, [pc, #168]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	610b      	str	r3, [r1, #16]
 80033cc:	e027      	b.n	800341e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d112      	bne.n	80033fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6892      	ldr	r2, [r2, #8]
 80033e4:	0211      	lsls	r1, r2, #8
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6912      	ldr	r2, [r2, #16]
 80033ea:	0852      	lsrs	r2, r2, #1
 80033ec:	3a01      	subs	r2, #1
 80033ee:	0552      	lsls	r2, r2, #21
 80033f0:	430a      	orrs	r2, r1
 80033f2:	491f      	ldr	r1, [pc, #124]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	610b      	str	r3, [r1, #16]
 80033f8:	e011      	b.n	800341e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003402:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6892      	ldr	r2, [r2, #8]
 800340a:	0211      	lsls	r1, r2, #8
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6952      	ldr	r2, [r2, #20]
 8003410:	0852      	lsrs	r2, r2, #1
 8003412:	3a01      	subs	r2, #1
 8003414:	0652      	lsls	r2, r2, #25
 8003416:	430a      	orrs	r2, r1
 8003418:	4915      	ldr	r1, [pc, #84]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 800341a:	4313      	orrs	r3, r2
 800341c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a13      	ldr	r2, [pc, #76]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003424:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003428:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fd fd1d 	bl	8000e68 <HAL_GetTick>
 800342e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003430:	e009      	b.n	8003446 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003432:	f7fd fd19 	bl	8000e68 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d902      	bls.n	8003446 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	73fb      	strb	r3, [r7, #15]
          break;
 8003444:	e005      	b.n	8003452 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0ef      	beq.n	8003432 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	4903      	ldr	r1, [pc, #12]	; (8003470 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000

08003474 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003482:	4b69      	ldr	r3, [pc, #420]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d018      	beq.n	80034c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800348e:	4b66      	ldr	r3, [pc, #408]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0203 	and.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d10d      	bne.n	80034ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
       ||
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034a6:	4b60      	ldr	r3, [pc, #384]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
       ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d047      	beq.n	800354a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	e044      	b.n	800354a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d018      	beq.n	80034fa <RCCEx_PLLSAI2_Config+0x86>
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d825      	bhi.n	8003518 <RCCEx_PLLSAI2_Config+0xa4>
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d002      	beq.n	80034d6 <RCCEx_PLLSAI2_Config+0x62>
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d009      	beq.n	80034e8 <RCCEx_PLLSAI2_Config+0x74>
 80034d4:	e020      	b.n	8003518 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034d6:	4b54      	ldr	r3, [pc, #336]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11d      	bne.n	800351e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e6:	e01a      	b.n	800351e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034e8:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d116      	bne.n	8003522 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f8:	e013      	b.n	8003522 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034fa:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003506:	4b48      	ldr	r3, [pc, #288]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003516:	e006      	b.n	8003526 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e004      	b.n	8003528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800351e:	bf00      	nop
 8003520:	e002      	b.n	8003528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003526:	bf00      	nop
    }

    if(status == HAL_OK)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10d      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800352e:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6819      	ldr	r1, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	3b01      	subs	r3, #1
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	430b      	orrs	r3, r1
 8003544:	4938      	ldr	r1, [pc, #224]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d166      	bne.n	800361e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a34      	ldr	r2, [pc, #208]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fd fc84 	bl	8000e68 <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003562:	e009      	b.n	8003578 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003564:	f7fd fc80 	bl	8000e68 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	73fb      	strb	r3, [r7, #15]
        break;
 8003576:	e005      	b.n	8003584 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ef      	bne.n	8003564 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d149      	bne.n	800361e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d110      	bne.n	80035b2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6892      	ldr	r2, [r2, #8]
 80035a0:	0211      	lsls	r1, r2, #8
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68d2      	ldr	r2, [r2, #12]
 80035a6:	06d2      	lsls	r2, r2, #27
 80035a8:	430a      	orrs	r2, r1
 80035aa:	491f      	ldr	r1, [pc, #124]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	614b      	str	r3, [r1, #20]
 80035b0:	e011      	b.n	80035d6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6892      	ldr	r2, [r2, #8]
 80035c2:	0211      	lsls	r1, r2, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6912      	ldr	r2, [r2, #16]
 80035c8:	0852      	lsrs	r2, r2, #1
 80035ca:	3a01      	subs	r2, #1
 80035cc:	0652      	lsls	r2, r2, #25
 80035ce:	430a      	orrs	r2, r1
 80035d0:	4915      	ldr	r1, [pc, #84]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a13      	ldr	r2, [pc, #76]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e2:	f7fd fc41 	bl	8000e68 <HAL_GetTick>
 80035e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035e8:	e009      	b.n	80035fe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035ea:	f7fd fc3d 	bl	8000e68 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d902      	bls.n	80035fe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	73fb      	strb	r3, [r7, #15]
          break;
 80035fc:	e005      	b.n	800360a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0ef      	beq.n	80035ea <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4d0d      	ldr	r5, [pc, #52]	; (8003664 <__libc_init_array+0x38>)
 8003630:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003632:	1b64      	subs	r4, r4, r5
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	2600      	movs	r6, #0
 8003638:	42a6      	cmp	r6, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	4d0b      	ldr	r5, [pc, #44]	; (800366c <__libc_init_array+0x40>)
 800363e:	4c0c      	ldr	r4, [pc, #48]	; (8003670 <__libc_init_array+0x44>)
 8003640:	f000 f862 	bl	8003708 <_init>
 8003644:	1b64      	subs	r4, r4, r5
 8003646:	10a4      	asrs	r4, r4, #2
 8003648:	2600      	movs	r6, #0
 800364a:	42a6      	cmp	r6, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	f855 3b04 	ldr.w	r3, [r5], #4
 8003654:	4798      	blx	r3
 8003656:	3601      	adds	r6, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	f855 3b04 	ldr.w	r3, [r5], #4
 800365e:	4798      	blx	r3
 8003660:	3601      	adds	r6, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	080037b4 	.word	0x080037b4
 8003668:	080037b4 	.word	0x080037b4
 800366c:	080037b4 	.word	0x080037b4
 8003670:	080037b8 	.word	0x080037b8

08003674 <memset>:
 8003674:	4402      	add	r2, r0
 8003676:	4603      	mov	r3, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	d100      	bne.n	800367e <memset+0xa>
 800367c:	4770      	bx	lr
 800367e:	f803 1b01 	strb.w	r1, [r3], #1
 8003682:	e7f9      	b.n	8003678 <memset+0x4>

08003684 <floorf>:
 8003684:	ee10 3a10 	vmov	r3, s0
 8003688:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800368c:	3a7f      	subs	r2, #127	; 0x7f
 800368e:	2a16      	cmp	r2, #22
 8003690:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003694:	dc2a      	bgt.n	80036ec <floorf+0x68>
 8003696:	2a00      	cmp	r2, #0
 8003698:	da11      	bge.n	80036be <floorf+0x3a>
 800369a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80036fc <floorf+0x78>
 800369e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80036a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80036a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036aa:	dd05      	ble.n	80036b8 <floorf+0x34>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	da23      	bge.n	80036f8 <floorf+0x74>
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <floorf+0x7c>)
 80036b2:	2900      	cmp	r1, #0
 80036b4:	bf18      	it	ne
 80036b6:	4613      	movne	r3, r2
 80036b8:	ee00 3a10 	vmov	s0, r3
 80036bc:	4770      	bx	lr
 80036be:	4911      	ldr	r1, [pc, #68]	; (8003704 <floorf+0x80>)
 80036c0:	4111      	asrs	r1, r2
 80036c2:	420b      	tst	r3, r1
 80036c4:	d0fa      	beq.n	80036bc <floorf+0x38>
 80036c6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80036fc <floorf+0x78>
 80036ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80036ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	ddef      	ble.n	80036b8 <floorf+0x34>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bfbe      	ittt	lt
 80036dc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80036e0:	fa40 f202 	asrlt.w	r2, r0, r2
 80036e4:	189b      	addlt	r3, r3, r2
 80036e6:	ea23 0301 	bic.w	r3, r3, r1
 80036ea:	e7e5      	b.n	80036b8 <floorf+0x34>
 80036ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80036f0:	d3e4      	bcc.n	80036bc <floorf+0x38>
 80036f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80036f6:	4770      	bx	lr
 80036f8:	2300      	movs	r3, #0
 80036fa:	e7dd      	b.n	80036b8 <floorf+0x34>
 80036fc:	7149f2ca 	.word	0x7149f2ca
 8003700:	bf800000 	.word	0xbf800000
 8003704:	007fffff 	.word	0x007fffff

08003708 <_init>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	bf00      	nop
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr

08003714 <_fini>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr
