
Zadanie_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001968  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001b14  08001b14  00011b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b68  08001b68  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b68  08001b68  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b68  08001b68  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b68  08001b68  00011b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b6c  08001b6c  00011b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08001b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  2000001c  08001b8c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08001b8c  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b57  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011c8  00000000  00000000  00025ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00026d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000518  00000000  00000000  00027320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c47  00000000  00000000  00027838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a3a  00000000  00000000  0004e47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee2ea  00000000  00000000  00053eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001421a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014e0  00000000  00000000  001421f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001afc 	.word	0x08001afc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08001afc 	.word	0x08001afc

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fad3 	bl	800079a <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_PWREx_EnableVddIO2();
 80001f4:	f000 fe52 	bl	8000e9c <HAL_PWREx_EnableVddIO2>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f805 	bl	8000206 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  switchInitialisation();
 80001fc:	f000 f84a 	bl	8000294 <switchInitialisation>
  baseTransistInit();
 8000200:	f000 f862 	bl	80002c8 <baseTransistInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	e7fe      	b.n	8000204 <main+0x18>

08000206 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000206:	b580      	push	{r7, lr}
 8000208:	b096      	sub	sp, #88	; 0x58
 800020a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020c:	f107 0314 	add.w	r3, r7, #20
 8000210:	2244      	movs	r2, #68	; 0x44
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f001 fc69 	bl	8001aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021a:	463b      	mov	r3, r7
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800022c:	f000 fde0 	bl	8000df0 <HAL_PWREx_ControlVoltageScaling>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000236:	f000 f85f 	bl	80002f8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800023a:	2310      	movs	r3, #16
 800023c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000246:	2360      	movs	r3, #96	; 0x60
 8000248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024a:	2300      	movs	r3, #0
 800024c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fe32 	bl	8000ebc <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800025e:	f000 f84b 	bl	80002f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	230f      	movs	r3, #15
 8000264:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000276:	463b      	mov	r3, r7
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fa44 	bl	8001708 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000286:	f000 f837 	bl	80002f8 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3758      	adds	r7, #88	; 0x58
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <switchInitialisation>:

/* USER CODE BEGIN 4 */
void switchInitialisation(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef Joys;
	Joys.Mode = GPIO_MODE_INPUT;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
	Joys.Pin = GPIO_PIN_15; // JOY_PUSH
 800029e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002a2:	607b      	str	r3, [r7, #4]
	Joys.Pull = GPIO_PULLUP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	60fb      	str	r3, [r7, #12]
	Joys.Speed = GPIO_SPEED_LOW;
 80002a8:	2300      	movs	r3, #0
 80002aa:	613b      	str	r3, [r7, #16]
	Joys.Alternate = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOE, &Joys);
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4619      	mov	r1, r3
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <switchInitialisation+0x30>)
 80002b6:	f000 fbcb 	bl	8000a50 <HAL_GPIO_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	48001000 	.word	0x48001000

080002c8 <baseTransistInit>:

void baseTransistInit(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef Transistors;
	Transistors.Mode = GPIO_MODE_OUTPUT_PP;
 80002ce:	2301      	movs	r3, #1
 80002d0:	60bb      	str	r3, [r7, #8]
	Transistors.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80002d2:	233c      	movs	r3, #60	; 0x3c
 80002d4:	607b      	str	r3, [r7, #4]
	Transistors.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
	Transistors.Speed = GPIO_SPEED_LOW;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
	Transistors.Alternate = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &Transistors);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	4803      	ldr	r0, [pc, #12]	; (80002f4 <baseTransistInit+0x2c>)
 80002e8:	f000 fbb2 	bl	8000a50 <HAL_GPIO_Init>
}
 80002ec:	bf00      	nop
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	48000400 	.word	0x48000400

080002f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fc:	b672      	cpsid	i
}
 80002fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000300:	e7fe      	b.n	8000300 <Error_Handler+0x8>
	...

08000304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <HAL_MspInit+0x44>)
 800030c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800030e:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <HAL_MspInit+0x44>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6613      	str	r3, [r2, #96]	; 0x60
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <HAL_MspInit+0x44>)
 8000318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <HAL_MspInit+0x44>)
 8000324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000326:	4a08      	ldr	r2, [pc, #32]	; (8000348 <HAL_MspInit+0x44>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	6593      	str	r3, [r2, #88]	; 0x58
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_MspInit+0x44>)
 8000330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000

0800034c <changeSeconds>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void changeSeconds()
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	if(secondSecond < 9)
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <changeSeconds+0x50>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b08      	cmp	r3, #8
 8000356:	dc05      	bgt.n	8000364 <changeSeconds+0x18>
		secondSecond++;
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <changeSeconds+0x50>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	4a0f      	ldr	r2, [pc, #60]	; (800039c <changeSeconds+0x50>)
 8000360:	6013      	str	r3, [r2, #0]
			secondSecond = 0;
			secondFirst = 0;
			changeMinutes();
		}
	}
}
 8000362:	e018      	b.n	8000396 <changeSeconds+0x4a>
	else if(secondSecond == 9)
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <changeSeconds+0x50>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b09      	cmp	r3, #9
 800036a:	d114      	bne.n	8000396 <changeSeconds+0x4a>
		if(secondFirst < 5)
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <changeSeconds+0x54>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b04      	cmp	r3, #4
 8000372:	dc08      	bgt.n	8000386 <changeSeconds+0x3a>
			secondSecond = 0;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <changeSeconds+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
			secondFirst++;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <changeSeconds+0x54>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	3301      	adds	r3, #1
 8000380:	4a07      	ldr	r2, [pc, #28]	; (80003a0 <changeSeconds+0x54>)
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	e007      	b.n	8000396 <changeSeconds+0x4a>
			secondSecond = 0;
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <changeSeconds+0x50>)
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
			secondFirst = 0;
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <changeSeconds+0x54>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
			changeMinutes();
 8000392:	f000 f807 	bl	80003a4 <changeMinutes>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000040 	.word	0x20000040
 80003a0:	2000003c 	.word	0x2000003c

080003a4 <changeMinutes>:

void changeMinutes()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	if(minuteSecond < 9)
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <changeMinutes+0x50>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b08      	cmp	r3, #8
 80003ae:	dc05      	bgt.n	80003bc <changeMinutes+0x18>
		minuteSecond++;
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <changeMinutes+0x50>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <changeMinutes+0x50>)
 80003b8:	6013      	str	r3, [r2, #0]
			minuteSecond = 0;
			minuteFirst = 0;
			changeHours();
		}
	}
}
 80003ba:	e018      	b.n	80003ee <changeMinutes+0x4a>
	else if(minuteSecond == 9)
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <changeMinutes+0x50>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b09      	cmp	r3, #9
 80003c2:	d114      	bne.n	80003ee <changeMinutes+0x4a>
		if(minuteFirst < 5)
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <changeMinutes+0x54>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b04      	cmp	r3, #4
 80003ca:	dc08      	bgt.n	80003de <changeMinutes+0x3a>
			minuteSecond = 0;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <changeMinutes+0x50>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
			minuteSecond++;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <changeMinutes+0x50>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	3301      	adds	r3, #1
 80003d8:	4a06      	ldr	r2, [pc, #24]	; (80003f4 <changeMinutes+0x50>)
 80003da:	6013      	str	r3, [r2, #0]
}
 80003dc:	e007      	b.n	80003ee <changeMinutes+0x4a>
			minuteSecond = 0;
 80003de:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <changeMinutes+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
			minuteFirst = 0;
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <changeMinutes+0x54>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
			changeHours();
 80003ea:	f000 f807 	bl	80003fc <changeHours>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000038 	.word	0x20000038
 80003f8:	20000008 	.word	0x20000008

080003fc <changeHours>:

void changeHours()
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	if(hourFirst <= 1 && hourSecond < 9)
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <changeHours+0x78>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b01      	cmp	r3, #1
 8000406:	dc09      	bgt.n	800041c <changeHours+0x20>
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <changeHours+0x7c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b08      	cmp	r3, #8
 800040e:	dc05      	bgt.n	800041c <changeHours+0x20>
		hourSecond++;
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <changeHours+0x7c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3301      	adds	r3, #1
 8000416:	4a18      	ldr	r2, [pc, #96]	; (8000478 <changeHours+0x7c>)
 8000418:	6013      	str	r3, [r2, #0]
 800041a:	e025      	b.n	8000468 <changeHours+0x6c>
	else if(hourFirst <= 1 && hourSecond == 9)
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <changeHours+0x78>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	dc0c      	bgt.n	800043e <changeHours+0x42>
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <changeHours+0x7c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b09      	cmp	r3, #9
 800042a:	d108      	bne.n	800043e <changeHours+0x42>
	{
		hourSecond = 0;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <changeHours+0x7c>)
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
		hourFirst++;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <changeHours+0x78>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	3301      	adds	r3, #1
 8000438:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <changeHours+0x78>)
 800043a:	6013      	str	r3, [r2, #0]
 800043c:	e014      	b.n	8000468 <changeHours+0x6c>
	}
	else if(hourFirst == 2 && hourSecond < 3)
 800043e:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <changeHours+0x78>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d109      	bne.n	800045a <changeHours+0x5e>
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <changeHours+0x7c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2b02      	cmp	r3, #2
 800044c:	dc05      	bgt.n	800045a <changeHours+0x5e>
		hourSecond++;
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <changeHours+0x7c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <changeHours+0x7c>)
 8000456:	6013      	str	r3, [r2, #0]
 8000458:	e006      	b.n	8000468 <changeHours+0x6c>
	else
	{
		hourSecond = 0;
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <changeHours+0x7c>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
		hourFirst = 0;
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <changeHours+0x78>)
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
	}
}
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	20000000 	.word	0x20000000
 8000478:	20000004 	.word	0x20000004

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */

void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f9bc 	bl	8000844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  static int miliSeconds = 0;
  inputHandling();
 80004cc:	f000 f8f8 	bl	80006c0 <inputHandling>
  if((miliSeconds % 1000) == 0)
 80004d0:	4b6e      	ldr	r3, [pc, #440]	; (800068c <SysTick_Handler+0x1c8>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b6e      	ldr	r3, [pc, #440]	; (8000690 <SysTick_Handler+0x1cc>)
 80004d6:	fb83 1302 	smull	r1, r3, r3, r2
 80004da:	1199      	asrs	r1, r3, #6
 80004dc:	17d3      	asrs	r3, r2, #31
 80004de:	1acb      	subs	r3, r1, r3
 80004e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004e4:	fb01 f303 	mul.w	r3, r1, r3
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	f040 80c6 	bne.w	800067c <SysTick_Handler+0x1b8>
  {
	   HAL_GPIO_WritePin(GPIOG, GPIO_PIN_All, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004f6:	4867      	ldr	r0, [pc, #412]	; (8000694 <SysTick_Handler+0x1d0>)
 80004f8:	f000 fc54 	bl	8000da4 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	213c      	movs	r1, #60	; 0x3c
 8000500:	4865      	ldr	r0, [pc, #404]	; (8000698 <SysTick_Handler+0x1d4>)
 8000502:	f000 fc4f 	bl	8000da4 <HAL_GPIO_WritePin>
	   if(showHHMM)
 8000506:	4b65      	ldr	r3, [pc, #404]	; (800069c <SysTick_Handler+0x1d8>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d058      	beq.n	80005c0 <SysTick_Handler+0xfc>
	   {
		   if(miliSeconds / 1000 == 0)
 800050e:	4b5f      	ldr	r3, [pc, #380]	; (800068c <SysTick_Handler+0x1c8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8000516:	f240 72ce 	movw	r2, #1998	; 0x7ce
 800051a:	4293      	cmp	r3, r2
 800051c:	d80f      	bhi.n	800053e <SysTick_Handler+0x7a>
		   {
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2104      	movs	r1, #4
 8000522:	485d      	ldr	r0, [pc, #372]	; (8000698 <SysTick_Handler+0x1d4>)
 8000524:	f000 fc3e 	bl	8000da4 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOG, tableOfSegments[hourFirst], GPIO_PIN_SET);
 8000528:	4b5d      	ldr	r3, [pc, #372]	; (80006a0 <SysTick_Handler+0x1dc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a5d      	ldr	r2, [pc, #372]	; (80006a4 <SysTick_Handler+0x1e0>)
 800052e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000532:	2201      	movs	r2, #1
 8000534:	4619      	mov	r1, r3
 8000536:	4857      	ldr	r0, [pc, #348]	; (8000694 <SysTick_Handler+0x1d0>)
 8000538:	f000 fc34 	bl	8000da4 <HAL_GPIO_WritePin>
 800053c:	e09c      	b.n	8000678 <SysTick_Handler+0x1b4>
		   }
		   else if(miliSeconds / 1000 == 1)
 800053e:	4b53      	ldr	r3, [pc, #332]	; (800068c <SysTick_Handler+0x1c8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800054a:	d20f      	bcs.n	800056c <SysTick_Handler+0xa8>
		   {
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2108      	movs	r1, #8
 8000550:	4851      	ldr	r0, [pc, #324]	; (8000698 <SysTick_Handler+0x1d4>)
 8000552:	f000 fc27 	bl	8000da4 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOG, tableOfSegments[hourSecond], GPIO_PIN_SET);
 8000556:	4b54      	ldr	r3, [pc, #336]	; (80006a8 <SysTick_Handler+0x1e4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a52      	ldr	r2, [pc, #328]	; (80006a4 <SysTick_Handler+0x1e0>)
 800055c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000560:	2201      	movs	r2, #1
 8000562:	4619      	mov	r1, r3
 8000564:	484b      	ldr	r0, [pc, #300]	; (8000694 <SysTick_Handler+0x1d0>)
 8000566:	f000 fc1d 	bl	8000da4 <HAL_GPIO_WritePin>
 800056a:	e085      	b.n	8000678 <SysTick_Handler+0x1b4>
		   }
		   else if(miliSeconds / 1000 == 2)
 800056c:	4b47      	ldr	r3, [pc, #284]	; (800068c <SysTick_Handler+0x1c8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8000574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000578:	d20f      	bcs.n	800059a <SysTick_Handler+0xd6>
		   {
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2110      	movs	r1, #16
 800057e:	4846      	ldr	r0, [pc, #280]	; (8000698 <SysTick_Handler+0x1d4>)
 8000580:	f000 fc10 	bl	8000da4 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOG, tableOfSegments[minuteFirst], GPIO_PIN_SET);
 8000584:	4b49      	ldr	r3, [pc, #292]	; (80006ac <SysTick_Handler+0x1e8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a46      	ldr	r2, [pc, #280]	; (80006a4 <SysTick_Handler+0x1e0>)
 800058a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	4840      	ldr	r0, [pc, #256]	; (8000694 <SysTick_Handler+0x1d0>)
 8000594:	f000 fc06 	bl	8000da4 <HAL_GPIO_WritePin>
 8000598:	e06e      	b.n	8000678 <SysTick_Handler+0x1b4>
		   }
		   else
		   {
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2120      	movs	r1, #32
 800059e:	483e      	ldr	r0, [pc, #248]	; (8000698 <SysTick_Handler+0x1d4>)
 80005a0:	f000 fc00 	bl	8000da4 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOG, tableOfSegments[minuteSecond], GPIO_PIN_SET);
 80005a4:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <SysTick_Handler+0x1ec>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a3e      	ldr	r2, [pc, #248]	; (80006a4 <SysTick_Handler+0x1e0>)
 80005aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	4838      	ldr	r0, [pc, #224]	; (8000694 <SysTick_Handler+0x1d0>)
 80005b4:	f000 fbf6 	bl	8000da4 <HAL_GPIO_WritePin>
			   miliSeconds = 0;
 80005b8:	4b34      	ldr	r3, [pc, #208]	; (800068c <SysTick_Handler+0x1c8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	e05b      	b.n	8000678 <SysTick_Handler+0x1b4>
		   }
	   }
	   else if(showMMSS)
 80005c0:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <SysTick_Handler+0x1f0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d057      	beq.n	8000678 <SysTick_Handler+0x1b4>
	   {
		   if(miliSeconds / 1000 == 0)
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <SysTick_Handler+0x1c8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80005d0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d80f      	bhi.n	80005f8 <SysTick_Handler+0x134>
			   {
				   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2104      	movs	r1, #4
 80005dc:	482e      	ldr	r0, [pc, #184]	; (8000698 <SysTick_Handler+0x1d4>)
 80005de:	f000 fbe1 	bl	8000da4 <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(GPIOG, tableOfSegments[minuteFirst], GPIO_PIN_SET);
 80005e2:	4b32      	ldr	r3, [pc, #200]	; (80006ac <SysTick_Handler+0x1e8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <SysTick_Handler+0x1e0>)
 80005e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	4828      	ldr	r0, [pc, #160]	; (8000694 <SysTick_Handler+0x1d0>)
 80005f2:	f000 fbd7 	bl	8000da4 <HAL_GPIO_WritePin>
 80005f6:	e03f      	b.n	8000678 <SysTick_Handler+0x1b4>
			   }
			   else if(miliSeconds / 1000 == 1)
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <SysTick_Handler+0x1c8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000604:	d20f      	bcs.n	8000626 <SysTick_Handler+0x162>
			   {
				   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2108      	movs	r1, #8
 800060a:	4823      	ldr	r0, [pc, #140]	; (8000698 <SysTick_Handler+0x1d4>)
 800060c:	f000 fbca 	bl	8000da4 <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(GPIOG, tableOfSegments[minuteSecond], GPIO_PIN_SET);
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SysTick_Handler+0x1ec>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <SysTick_Handler+0x1e0>)
 8000616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <SysTick_Handler+0x1d0>)
 8000620:	f000 fbc0 	bl	8000da4 <HAL_GPIO_WritePin>
 8000624:	e028      	b.n	8000678 <SysTick_Handler+0x1b4>
			   }
			   else if(miliSeconds / 1000 == 2)
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <SysTick_Handler+0x1c8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800062e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000632:	d20f      	bcs.n	8000654 <SysTick_Handler+0x190>
			   {
				   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2110      	movs	r1, #16
 8000638:	4817      	ldr	r0, [pc, #92]	; (8000698 <SysTick_Handler+0x1d4>)
 800063a:	f000 fbb3 	bl	8000da4 <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(GPIOG, tableOfSegments[secondFirst], GPIO_PIN_SET);
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <SysTick_Handler+0x1f4>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <SysTick_Handler+0x1e0>)
 8000644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	4811      	ldr	r0, [pc, #68]	; (8000694 <SysTick_Handler+0x1d0>)
 800064e:	f000 fba9 	bl	8000da4 <HAL_GPIO_WritePin>
 8000652:	e011      	b.n	8000678 <SysTick_Handler+0x1b4>
			   }
			   else
			   {
				   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2120      	movs	r1, #32
 8000658:	480f      	ldr	r0, [pc, #60]	; (8000698 <SysTick_Handler+0x1d4>)
 800065a:	f000 fba3 	bl	8000da4 <HAL_GPIO_WritePin>
				   HAL_GPIO_WritePin(GPIOG, tableOfSegments[secondSecond], GPIO_PIN_SET);
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <SysTick_Handler+0x1f8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <SysTick_Handler+0x1e0>)
 8000664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000668:	2201      	movs	r2, #1
 800066a:	4619      	mov	r1, r3
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <SysTick_Handler+0x1d0>)
 800066e:	f000 fb99 	bl	8000da4 <HAL_GPIO_WritePin>
				   miliSeconds = 0;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <SysTick_Handler+0x1c8>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
			   }
	   }
	   changeSeconds();
 8000678:	f7ff fe68 	bl	800034c <changeSeconds>
  }
  miliSeconds++;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <SysTick_Handler+0x1c8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	4a02      	ldr	r2, [pc, #8]	; (800068c <SysTick_Handler+0x1c8>)
 8000684:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000050 	.word	0x20000050
 8000690:	10624dd3 	.word	0x10624dd3
 8000694:	48001800 	.word	0x48001800
 8000698:	48000400 	.word	0x48000400
 800069c:	20000044 	.word	0x20000044
 80006a0:	20000000 	.word	0x20000000
 80006a4:	08001b14 	.word	0x08001b14
 80006a8:	20000004 	.word	0x20000004
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000038 	.word	0x20000038
 80006b4:	20000048 	.word	0x20000048
 80006b8:	2000003c 	.word	0x2000003c
 80006bc:	20000040 	.word	0x20000040

080006c0 <inputHandling>:
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void inputHandling()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	buttonMs++;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <inputHandling+0x50>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <inputHandling+0x50>)
 80006cc:	6013      	str	r3, [r2, #0]
	if(buttonMs < buttonDelay)
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <inputHandling+0x50>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <inputHandling+0x54>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	db18      	blt.n	800070c <inputHandling+0x4c>
		return;
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15 ) == GPIO_PIN_RESET)
 80006da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <inputHandling+0x58>)
 80006e0:	f000 fb48 	bl	8000d74 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d109      	bne.n	80006fe <inputHandling+0x3e>
	{
		buttonMs = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <inputHandling+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
		showMMSS = 1;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <inputHandling+0x5c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
		showHHMM = 0;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <inputHandling+0x60>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
		return;
 80006fc:	e007      	b.n	800070e <inputHandling+0x4e>
	}
	showMMSS = 0;
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <inputHandling+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	showHHMM = 1;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <inputHandling+0x60>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e000      	b.n	800070e <inputHandling+0x4e>
		return;
 800070c:	bf00      	nop

}
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000004c 	.word	0x2000004c
 8000714:	2000000c 	.word	0x2000000c
 8000718:	48001000 	.word	0x48001000
 800071c:	20000048 	.word	0x20000048
 8000720:	20000044 	.word	0x20000044

08000724 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SystemInit+0x20>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <SystemInit+0x20>)
 8000730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000780 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800074c:	f7ff ffea 	bl	8000724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000776:	f001 f995 	bl	8001aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800077a:	f7ff fd37 	bl	80001ec <main>

0800077e <LoopForever>:

LoopForever:
    b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000780:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800078c:	08001b70 	.word	0x08001b70
  ldr r2, =_sbss
 8000790:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000794:	20000058 	.word	0x20000058

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>

0800079a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 f91f 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007aa:	200f      	movs	r0, #15
 80007ac:	f000 f80e 	bl	80007cc <HAL_InitTick>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d002      	beq.n	80007bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	e001      	b.n	80007c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007bc:	f7ff fda2 	bl	8000304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007c0:	79fb      	ldrb	r3, [r7, #7]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <HAL_InitTick+0x6c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d023      	beq.n	8000828 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_InitTick+0x70>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <HAL_InitTick+0x6c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f91d 	bl	8000a36 <HAL_SYSTICK_Config>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10f      	bne.n	8000822 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d809      	bhi.n	800081c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 f8f5 	bl	80009fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <HAL_InitTick+0x74>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	e007      	b.n	800082c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e004      	b.n	800082c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e001      	b.n	800082c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000018 	.word	0x20000018
 800083c:	20000010 	.word	0x20000010
 8000840:	20000014 	.word	0x20000014

08000844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_IncTick+0x20>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x24>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_IncTick+0x24>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000018 	.word	0x20000018
 8000868:	20000054 	.word	0x20000054

0800086c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_GetTick+0x14>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000054 	.word	0x20000054

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db0a      	blt.n	8000912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <__NVIC_SetPriority+0x4c>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	440b      	add	r3, r1
 800090c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000910:	e00a      	b.n	8000928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4908      	ldr	r1, [pc, #32]	; (8000938 <__NVIC_SetPriority+0x50>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	3b04      	subs	r3, #4
 8000920:	0112      	lsls	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	440b      	add	r3, r1
 8000926:	761a      	strb	r2, [r3, #24]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f1c3 0307 	rsb	r3, r3, #7
 8000956:	2b04      	cmp	r3, #4
 8000958:	bf28      	it	cs
 800095a:	2304      	movcs	r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3304      	adds	r3, #4
 8000962:	2b06      	cmp	r3, #6
 8000964:	d902      	bls.n	800096c <NVIC_EncodePriority+0x30>
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b03      	subs	r3, #3
 800096a:	e000      	b.n	800096e <NVIC_EncodePriority+0x32>
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43da      	mvns	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43d9      	mvns	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	4313      	orrs	r3, r2
         );
}
 8000996:	4618      	mov	r0, r3
 8000998:	3724      	adds	r7, #36	; 0x24
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b4:	d301      	bcc.n	80009ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00f      	b.n	80009da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <SysTick_Config+0x40>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c2:	210f      	movs	r1, #15
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c8:	f7ff ff8e 	bl	80008e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SysTick_Config+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SysTick_Config+0x40>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff47 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a10:	f7ff ff5c 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff ff8e 	bl	800093c <NVIC_EncodePriority>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff5d 	bl	80008e8 <__NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffb0 	bl	80009a4 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5e:	e166      	b.n	8000d2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	2101      	movs	r1, #1
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 8158 	beq.w	8000d28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d005      	beq.n	8000a90 <HAL_GPIO_Init+0x40>
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d130      	bne.n	8000af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	091b      	lsrs	r3, r3, #4
 8000adc:	f003 0201 	and.w	r2, r3, #1
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d017      	beq.n	8000b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d123      	bne.n	8000b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3208      	adds	r2, #8
 8000b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	220f      	movs	r2, #15
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	691a      	ldr	r2, [r3, #16]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	08da      	lsrs	r2, r3, #3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3208      	adds	r2, #8
 8000b7c:	6939      	ldr	r1, [r7, #16]
 8000b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f003 0203 	and.w	r2, r3, #3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 80b2 	beq.w	8000d28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc4:	4b61      	ldr	r3, [pc, #388]	; (8000d4c <HAL_GPIO_Init+0x2fc>)
 8000bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc8:	4a60      	ldr	r2, [pc, #384]	; (8000d4c <HAL_GPIO_Init+0x2fc>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd0:	4b5e      	ldr	r3, [pc, #376]	; (8000d4c <HAL_GPIO_Init+0x2fc>)
 8000bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bdc:	4a5c      	ldr	r2, [pc, #368]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	3302      	adds	r3, #2
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c06:	d02b      	beq.n	8000c60 <HAL_GPIO_Init+0x210>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a52      	ldr	r2, [pc, #328]	; (8000d54 <HAL_GPIO_Init+0x304>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d025      	beq.n	8000c5c <HAL_GPIO_Init+0x20c>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a51      	ldr	r2, [pc, #324]	; (8000d58 <HAL_GPIO_Init+0x308>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d01f      	beq.n	8000c58 <HAL_GPIO_Init+0x208>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a50      	ldr	r2, [pc, #320]	; (8000d5c <HAL_GPIO_Init+0x30c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d019      	beq.n	8000c54 <HAL_GPIO_Init+0x204>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a4f      	ldr	r2, [pc, #316]	; (8000d60 <HAL_GPIO_Init+0x310>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d013      	beq.n	8000c50 <HAL_GPIO_Init+0x200>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a4e      	ldr	r2, [pc, #312]	; (8000d64 <HAL_GPIO_Init+0x314>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00d      	beq.n	8000c4c <HAL_GPIO_Init+0x1fc>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a4d      	ldr	r2, [pc, #308]	; (8000d68 <HAL_GPIO_Init+0x318>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d007      	beq.n	8000c48 <HAL_GPIO_Init+0x1f8>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a4c      	ldr	r2, [pc, #304]	; (8000d6c <HAL_GPIO_Init+0x31c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d101      	bne.n	8000c44 <HAL_GPIO_Init+0x1f4>
 8000c40:	2307      	movs	r3, #7
 8000c42:	e00e      	b.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c44:	2308      	movs	r3, #8
 8000c46:	e00c      	b.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c48:	2306      	movs	r3, #6
 8000c4a:	e00a      	b.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	e008      	b.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c50:	2304      	movs	r3, #4
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x212>
 8000c60:	2300      	movs	r3, #0
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_GPIO_Init+0x300>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c80:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ca4:	4a32      	ldr	r2, [pc, #200]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000caa:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cce:	4a28      	ldr	r2, [pc, #160]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_GPIO_Init+0x320>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f ae91 	bne.w	8000a60 <HAL_GPIO_Init+0x10>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000c00 	.word	0x48000c00
 8000d60:	48001000 	.word	0x48001000
 8000d64:	48001400 	.word	0x48001400
 8000d68:	48001800 	.word	0x48001800
 8000d6c:	48001c00 	.word	0x48001c00
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	4013      	ands	r3, r2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e001      	b.n	8000d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
 8000db0:	4613      	mov	r3, r2
 8000db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db4:	787b      	ldrb	r3, [r7, #1]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <HAL_PWREx_GetVoltageRange+0x18>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40007000 	.word	0x40007000

08000df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dfe:	d130      	bne.n	8000e62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e0c:	d038      	beq.n	8000e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2232      	movs	r2, #50	; 0x32
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0c9b      	lsrs	r3, r3, #18
 8000e30:	3301      	adds	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e34:	e002      	b.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e48:	d102      	bne.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f2      	bne.n	8000e36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5c:	d110      	bne.n	8000e80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e00f      	b.n	8000e82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6e:	d007      	beq.n	8000e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40007000 	.word	0x40007000
 8000e94:	20000010 	.word	0x20000010
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6053      	str	r3, [r2, #4]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40007000 	.word	0x40007000

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f000 bc16 	b.w	80016fc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed0:	4ba0      	ldr	r3, [pc, #640]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eda:	4b9e      	ldr	r3, [pc, #632]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80e4 	beq.w	80010ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d007      	beq.n	8000f08 <HAL_RCC_OscConfig+0x4c>
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2b0c      	cmp	r3, #12
 8000efc:	f040 808b 	bne.w	8001016 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	f040 8087 	bne.w	8001016 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f08:	4b92      	ldr	r3, [pc, #584]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <HAL_RCC_OscConfig+0x64>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e3ed      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	4b8b      	ldr	r3, [pc, #556]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <HAL_RCC_OscConfig+0x7e>
 8000f30:	4b88      	ldr	r3, [pc, #544]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f38:	e005      	b.n	8000f46 <HAL_RCC_OscConfig+0x8a>
 8000f3a:	4b86      	ldr	r3, [pc, #536]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d223      	bcs.n	8000f92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fd48 	bl	80019e4 <RCC_SetFlashLatencyFromMSIRange>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e3ce      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7c      	ldr	r2, [pc, #496]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4977      	ldr	r1, [pc, #476]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f7c:	4b75      	ldr	r3, [pc, #468]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	4972      	ldr	r1, [pc, #456]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
 8000f90:	e025      	b.n	8000fde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f92:	4b70      	ldr	r3, [pc, #448]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6f      	ldr	r2, [pc, #444]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b6d      	ldr	r3, [pc, #436]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	496a      	ldr	r1, [pc, #424]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	4965      	ldr	r1, [pc, #404]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d109      	bne.n	8000fde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fd08 	bl	80019e4 <RCC_SetFlashLatencyFromMSIRange>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e38e      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fde:	f000 fc75 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	495a      	ldr	r1, [pc, #360]	; (8001158 <HAL_RCC_OscConfig+0x29c>)
 8000ff0:	5ccb      	ldrb	r3, [r1, r3]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <HAL_RCC_OscConfig+0x2a0>)
 8000ffc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ffe:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HAL_RCC_OscConfig+0x2a4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fbe2 	bl	80007cc <HAL_InitTick>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d052      	beq.n	80010b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	e372      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d032      	beq.n	8001084 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800101e:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102a:	f7ff fc1f 	bl	800086c <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001032:	f7ff fc1b 	bl	800086c <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e35b      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001044:	4b43      	ldr	r3, [pc, #268]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001050:	4b40      	ldr	r3, [pc, #256]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	493a      	ldr	r1, [pc, #232]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	4935      	ldr	r1, [pc, #212]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
 8001082:	e01a      	b.n	80010ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a32      	ldr	r2, [pc, #200]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001090:	f7ff fbec 	bl	800086c <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001098:	f7ff fbe8 	bl	800086c <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e328      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x1dc>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d073      	beq.n	80011ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_OscConfig+0x21c>
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d10e      	bne.n	80010f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d10b      	bne.n	80010f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d063      	beq.n	80011ac <HAL_RCC_OscConfig+0x2f0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d15f      	bne.n	80011ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e305      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f8:	d106      	bne.n	8001108 <HAL_RCC_OscConfig+0x24c>
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0x288>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x270>
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0x288>
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_RCC_OscConfig+0x298>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01b      	beq.n	8001184 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fb8e 	bl	800086c <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001152:	e010      	b.n	8001176 <HAL_RCC_OscConfig+0x2ba>
 8001154:	40021000 	.word	0x40021000
 8001158:	08001b28 	.word	0x08001b28
 800115c:	20000010 	.word	0x20000010
 8001160:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fb82 	bl	800086c <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e2c2      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001176:	4baf      	ldr	r3, [pc, #700]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x2a8>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff fb72 	bl	800086c <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fb6e 	bl	800086c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e2ae      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800119e:	4ba5      	ldr	r3, [pc, #660]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x2d0>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d060      	beq.n	800127c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d005      	beq.n	80011cc <HAL_RCC_OscConfig+0x310>
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2b0c      	cmp	r3, #12
 80011c4:	d119      	bne.n	80011fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d116      	bne.n	80011fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011cc:	4b99      	ldr	r3, [pc, #612]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_OscConfig+0x328>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e28b      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e4:	4b93      	ldr	r3, [pc, #588]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	061b      	lsls	r3, r3, #24
 80011f2:	4990      	ldr	r1, [pc, #576]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f8:	e040      	b.n	800127c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d023      	beq.n	800124a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001202:	4b8c      	ldr	r3, [pc, #560]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a8b      	ldr	r2, [pc, #556]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fb2d 	bl	800086c <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fb29 	bl	800086c <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e269      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001228:	4b82      	ldr	r3, [pc, #520]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	061b      	lsls	r3, r3, #24
 8001242:	497c      	ldr	r1, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
 8001248:	e018      	b.n	800127c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b7a      	ldr	r3, [pc, #488]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a79      	ldr	r2, [pc, #484]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fb09 	bl	800086c <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fb05 	bl	800086c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e245      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001270:	4b70      	ldr	r3, [pc, #448]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d03c      	beq.n	8001302 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01c      	beq.n	80012ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001290:	4b68      	ldr	r3, [pc, #416]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001296:	4a67      	ldr	r2, [pc, #412]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fae4 	bl	800086c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fae0 	bl	800086c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e220      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ba:	4b5e      	ldr	r3, [pc, #376]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80012bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ef      	beq.n	80012a8 <HAL_RCC_OscConfig+0x3ec>
 80012c8:	e01b      	b.n	8001302 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80012cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d0:	4a58      	ldr	r2, [pc, #352]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012da:	f7ff fac7 	bl	800086c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e2:	f7ff fac3 	bl	800086c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e203      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80012f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1ef      	bne.n	80012e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80a6 	beq.w	800145c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001314:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10d      	bne.n	800133c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	4a43      	ldr	r2, [pc, #268]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132a:	6593      	str	r3, [r2, #88]	; 0x58
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001338:	2301      	movs	r3, #1
 800133a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800133c:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <HAL_RCC_OscConfig+0x57c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d118      	bne.n	800137a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001348:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_RCC_OscConfig+0x57c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a3a      	ldr	r2, [pc, #232]	; (8001438 <HAL_RCC_OscConfig+0x57c>)
 800134e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001352:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001354:	f7ff fa8a 	bl	800086c <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135c:	f7ff fa86 	bl	800086c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1c6      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_RCC_OscConfig+0x57c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d108      	bne.n	8001394 <HAL_RCC_OscConfig+0x4d8>
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001388:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001392:	e024      	b.n	80013de <HAL_RCC_OscConfig+0x522>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b05      	cmp	r3, #5
 800139a:	d110      	bne.n	80013be <HAL_RCC_OscConfig+0x502>
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 800139e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a2:	4a24      	ldr	r2, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013bc:	e00f      	b.n	80013de <HAL_RCC_OscConfig+0x522>
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 80013d6:	f023 0304 	bic.w	r3, r3, #4
 80013da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d016      	beq.n	8001414 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff fa41 	bl	800086c <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fa3d 	bl	800086c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e17b      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_OscConfig+0x578>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0ed      	beq.n	80013ee <HAL_RCC_OscConfig+0x532>
 8001412:	e01a      	b.n	800144a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001414:	f7ff fa2a 	bl	800086c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800141a:	e00f      	b.n	800143c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fa26 	bl	800086c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	; 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d906      	bls.n	800143c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e164      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800143c:	4ba8      	ldr	r3, [pc, #672]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1e8      	bne.n	800141c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001450:	4ba3      	ldr	r3, [pc, #652]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	4aa2      	ldr	r2, [pc, #648]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800145a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d03c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	2b00      	cmp	r3, #0
 800146e:	d01c      	beq.n	80014aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001470:	4b9b      	ldr	r3, [pc, #620]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001476:	4a9a      	ldr	r2, [pc, #616]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff f9f4 	bl	800086c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001488:	f7ff f9f0 	bl	800086c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e130      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800149a:	4b91      	ldr	r3, [pc, #580]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800149c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0ef      	beq.n	8001488 <HAL_RCC_OscConfig+0x5cc>
 80014a8:	e01b      	b.n	80014e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014aa:	4b8d      	ldr	r3, [pc, #564]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80014ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014b0:	4a8b      	ldr	r2, [pc, #556]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff f9d7 	bl	800086c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014c2:	f7ff f9d3 	bl	800086c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e113      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014d4:	4b82      	ldr	r3, [pc, #520]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80014d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ef      	bne.n	80014c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8107 	beq.w	80016fa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	f040 80cb 	bne.w	800168c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014f6:	4b7a      	ldr	r3, [pc, #488]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f003 0203 	and.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	429a      	cmp	r2, r3
 8001508:	d12c      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	3b01      	subs	r3, #1
 8001516:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d123      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d11b      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d113      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	3b01      	subs	r3, #1
 800154a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d109      	bne.n	8001564 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d06d      	beq.n	8001640 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d068      	beq.n	800163c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001576:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0ba      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001586:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800158c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001590:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001592:	f7ff f96b 	bl	800086c <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff f967 	bl	800086c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0a7      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ac:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b8:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <HAL_RCC_OscConfig+0x828>)
 80015be:	4013      	ands	r3, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015c8:	3a01      	subs	r2, #1
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	4311      	orrs	r1, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015d2:	0212      	lsls	r2, r2, #8
 80015d4:	4311      	orrs	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015da:	0852      	lsrs	r2, r2, #1
 80015dc:	3a01      	subs	r2, #1
 80015de:	0552      	lsls	r2, r2, #21
 80015e0:	4311      	orrs	r1, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015e6:	0852      	lsrs	r2, r2, #1
 80015e8:	3a01      	subs	r2, #1
 80015ea:	0652      	lsls	r2, r2, #25
 80015ec:	4311      	orrs	r1, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015f2:	06d2      	lsls	r2, r2, #27
 80015f4:	430a      	orrs	r2, r1
 80015f6:	493a      	ldr	r1, [pc, #232]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015fc:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001606:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001608:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4a34      	ldr	r2, [pc, #208]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800160e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001614:	f7ff f92a 	bl	800086c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff f926 	bl	800086c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e066      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162e:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800163a:	e05e      	b.n	80016fa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e05d      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d156      	bne.n	80016fa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001656:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 800165e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001662:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001664:	f7ff f902 	bl	800086c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff f8fe 	bl	800086c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e03e      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x7b0>
 800168a:	e036      	b.n	80016fa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d031      	beq.n	80016f6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 8001698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d105      	bne.n	80016b6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_OscConfig+0x824>)
 80016bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff f8d1 	bl	800086c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	e00c      	b.n	80016e8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff f8cd 	bl	800086c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d905      	bls.n	80016e8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e00d      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
 80016e0:	40021000 	.word	0x40021000
 80016e4:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_OscConfig+0x848>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ec      	bne.n	80016ce <HAL_RCC_OscConfig+0x812>
 80016f4:	e001      	b.n	80016fa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0c8      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <HAL_RCC_ClockConfig+0x1b0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d910      	bls.n	800174c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_RCC_ClockConfig+0x1b0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 0207 	bic.w	r2, r3, #7
 8001732:	4961      	ldr	r1, [pc, #388]	; (80018b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b5f      	ldr	r3, [pc, #380]	; (80018b8 <HAL_RCC_ClockConfig+0x1b0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b0      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d04c      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d107      	bne.n	8001770 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001760:	4b56      	ldr	r3, [pc, #344]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d121      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e09e      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d107      	bne.n	8001788 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d115      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e092      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e086      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e07e      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 0203 	bic.w	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	493f      	ldr	r1, [pc, #252]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017c2:	f7ff f853 	bl	800086c <HAL_GetTick>
 80017c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7ff f84f 	bl	800086c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e066      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 020c 	and.w	r2, r3, #12
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d1eb      	bne.n	80017ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	492c      	ldr	r1, [pc, #176]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d210      	bcs.n	8001840 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0207 	bic.w	r2, r3, #7
 8001826:	4924      	ldr	r1, [pc, #144]	; (80018b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_RCC_ClockConfig+0x1b0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e036      	b.n	80018ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4918      	ldr	r1, [pc, #96]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4910      	ldr	r1, [pc, #64]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800187e:	f000 f825 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 8001882:	4602      	mov	r2, r0
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_RCC_ClockConfig+0x1b4>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	490c      	ldr	r1, [pc, #48]	; (80018c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	5ccb      	ldrb	r3, [r1, r3]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ff92 	bl	80007cc <HAL_InitTick>
 80018a8:	4603      	mov	r3, r0
 80018aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80018ac:	7afb      	ldrb	r3, [r7, #11]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08001b28 	.word	0x08001b28
 80018c4:	20000010 	.word	0x20000010
 80018c8:	20000014 	.word	0x20000014

080018cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e4:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x34>
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d121      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d11e      	bne.n	800193e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e005      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001928:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10d      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d102      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	e004      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d101      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001952:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d134      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800195a:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0xa6>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d003      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0xac>
 8001970:	e005      	b.n	800197e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCC_GetSysClockFreq+0x110>)
 8001974:	617b      	str	r3, [r7, #20]
      break;
 8001976:	e005      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800197a:	617b      	str	r3, [r7, #20]
      break;
 800197c:	e002      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	617b      	str	r3, [r7, #20]
      break;
 8001982:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	3301      	adds	r3, #1
 8001990:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	fb02 f203 	mul.w	r2, r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	0e5b      	lsrs	r3, r3, #25
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	3301      	adds	r3, #1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019c4:	69bb      	ldr	r3, [r7, #24]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08001b38 	.word	0x08001b38
 80019dc:	00f42400 	.word	0x00f42400
 80019e0:	007a1200 	.word	0x007a1200

080019e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019fc:	f7ff f9ea 	bl	8000dd4 <HAL_PWREx_GetVoltageRange>
 8001a00:	6178      	str	r0, [r7, #20]
 8001a02:	e014      	b.n	8001a2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a08:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a1c:	f7ff f9da 	bl	8000dd4 <HAL_PWREx_GetVoltageRange>
 8001a20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a34:	d10b      	bne.n	8001a4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b80      	cmp	r3, #128	; 0x80
 8001a3a:	d919      	bls.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a40:	d902      	bls.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a42:	2302      	movs	r3, #2
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	e013      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a48:	2301      	movs	r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	e010      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b80      	cmp	r3, #128	; 0x80
 8001a52:	d902      	bls.n	8001a5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a54:	2303      	movs	r3, #3
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	e00a      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d102      	bne.n	8001a66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a60:	2302      	movs	r3, #2
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	e004      	b.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b70      	cmp	r3, #112	; 0x70
 8001a6a:	d101      	bne.n	8001a70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 0207 	bic.w	r2, r3, #7
 8001a78:	4909      	ldr	r1, [pc, #36]	; (8001aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <__libc_init_array>:
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	4d0d      	ldr	r5, [pc, #52]	; (8001adc <__libc_init_array+0x38>)
 8001aa8:	4c0d      	ldr	r4, [pc, #52]	; (8001ae0 <__libc_init_array+0x3c>)
 8001aaa:	1b64      	subs	r4, r4, r5
 8001aac:	10a4      	asrs	r4, r4, #2
 8001aae:	2600      	movs	r6, #0
 8001ab0:	42a6      	cmp	r6, r4
 8001ab2:	d109      	bne.n	8001ac8 <__libc_init_array+0x24>
 8001ab4:	4d0b      	ldr	r5, [pc, #44]	; (8001ae4 <__libc_init_array+0x40>)
 8001ab6:	4c0c      	ldr	r4, [pc, #48]	; (8001ae8 <__libc_init_array+0x44>)
 8001ab8:	f000 f820 	bl	8001afc <_init>
 8001abc:	1b64      	subs	r4, r4, r5
 8001abe:	10a4      	asrs	r4, r4, #2
 8001ac0:	2600      	movs	r6, #0
 8001ac2:	42a6      	cmp	r6, r4
 8001ac4:	d105      	bne.n	8001ad2 <__libc_init_array+0x2e>
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
 8001ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001acc:	4798      	blx	r3
 8001ace:	3601      	adds	r6, #1
 8001ad0:	e7ee      	b.n	8001ab0 <__libc_init_array+0xc>
 8001ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad6:	4798      	blx	r3
 8001ad8:	3601      	adds	r6, #1
 8001ada:	e7f2      	b.n	8001ac2 <__libc_init_array+0x1e>
 8001adc:	08001b68 	.word	0x08001b68
 8001ae0:	08001b68 	.word	0x08001b68
 8001ae4:	08001b68 	.word	0x08001b68
 8001ae8:	08001b6c 	.word	0x08001b6c

08001aec <memset>:
 8001aec:	4402      	add	r2, r0
 8001aee:	4603      	mov	r3, r0
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d100      	bne.n	8001af6 <memset+0xa>
 8001af4:	4770      	bx	lr
 8001af6:	f803 1b01 	strb.w	r1, [r3], #1
 8001afa:	e7f9      	b.n	8001af0 <memset+0x4>

08001afc <_init>:
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	bf00      	nop
 8001b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b02:	bc08      	pop	{r3}
 8001b04:	469e      	mov	lr, r3
 8001b06:	4770      	bx	lr

08001b08 <_fini>:
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	bf00      	nop
 8001b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0e:	bc08      	pop	{r3}
 8001b10:	469e      	mov	lr, r3
 8001b12:	4770      	bx	lr
