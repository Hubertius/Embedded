
Zadanie_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001800  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080019ac  080019ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019ec  080019ec  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080019ec  080019ec  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019ec  080019ec  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019ec  080019ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019f0  080019f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080019f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000028  08001a1c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001a1c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ce8  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001186  00000000  00000000  00025d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00026ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000518  00000000  00000000  00027478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c17  00000000  00000000  00027990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059d6  00000000  00000000  0004e5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee244  00000000  00000000  00053f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001421c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014fc  00000000  00000000  00142214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001994 	.word	0x08001994

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08001994 	.word	0x08001994

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <main+0x70>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	4a19      	ldr	r2, [pc, #100]	; (800025c <main+0x70>)
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001fe:	4b17      	ldr	r3, [pc, #92]	; (800025c <main+0x70>)
 8000200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000202:	f003 0308 	and.w	r3, r3, #8
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800020a:	4b14      	ldr	r3, [pc, #80]	; (800025c <main+0x70>)
 800020c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <main+0x70>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <main+0x70>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021a:	f003 0304 	and.w	r3, r3, #4
 800021e:	60bb      	str	r3, [r7, #8]
 8000220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0x70>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000226:	4a0d      	ldr	r2, [pc, #52]	; (800025c <main+0x70>)
 8000228:	f043 0310 	orr.w	r3, r3, #16
 800022c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <main+0x70>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	f003 0310 	and.w	r3, r3, #16
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 f9fe 	bl	800063a <HAL_Init>

  /* USER CODE BEGIN Init */
  ledInit();
 800023e:	f000 f86d 	bl	800031c <ledInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f80d 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000246:	f000 f851 	bl	80002ec <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lightAllLEDS();
 800024a:	f000 f8f5 	bl	8000438 <lightAllLEDS>
	  resetAllLEDS();
 800024e:	f000 f94f 	bl	80004f0 <resetAllLEDS>
	  HAL_Delay(2000);
 8000252:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000256:	f000 fa65 	bl	8000724 <HAL_Delay>
	  lightAllLEDS();
 800025a:	e7f6      	b.n	800024a <main+0x5e>
 800025c:	40021000 	.word	0x40021000

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b096      	sub	sp, #88	; 0x58
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	2244      	movs	r2, #68	; 0x44
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fb88 	bl	8001984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	463b      	mov	r3, r7
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000282:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000286:	f000 fd0f 	bl	8000ca8 <HAL_PWREx_ControlVoltageScaling>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000290:	f000 f945 	bl	800051e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000294:	2310      	movs	r3, #16
 8000296:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002a0:	2360      	movs	r3, #96	; 0x60
 80002a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a4:	2300      	movs	r3, #0
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fd51 	bl	8000d54 <HAL_RCC_OscConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002b8:	f000 f931 	bl	800051e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	230f      	movs	r3, #15
 80002be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d0:	463b      	mov	r3, r7
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 f963 	bl	80015a0 <HAL_RCC_ClockConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002e0:	f000 f91d 	bl	800051e <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3758      	adds	r7, #88	; 0x58
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_GPIO_Init+0x2c>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a08      	ldr	r2, [pc, #32]	; (8000318 <MX_GPIO_Init+0x2c>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_GPIO_Init+0x2c>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000

0800031c <ledInit>:

/* USER CODE BEGIN 4 */
void ledInit()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	LED_C_init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000320:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <ledInit+0x7c>)
 8000322:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000326:	601a      	str	r2, [r3, #0]
	LED_C_init.Alternate = 0;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <ledInit+0x7c>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
	LED_C_init.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <ledInit+0x7c>)
 8000330:	2201      	movs	r2, #1
 8000332:	605a      	str	r2, [r3, #4]
	LED_C_init.Speed = GPIO_SPEED_FREQ_LOW;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <ledInit+0x7c>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
	LED_C_init.Pull = GPIO_NOPULL;
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <ledInit+0x7c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]

	LED_D_init.Pin = GPIO_PIN_3;
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <ledInit+0x80>)
 8000342:	2208      	movs	r2, #8
 8000344:	601a      	str	r2, [r3, #0]
	LED_D_init.Alternate = 0;
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <ledInit+0x80>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
	LED_D_init.Mode = GPIO_MODE_OUTPUT_PP;
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <ledInit+0x80>)
 800034e:	2201      	movs	r2, #1
 8000350:	605a      	str	r2, [r3, #4]
	LED_D_init.Speed = GPIO_SPEED_FREQ_LOW;
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <ledInit+0x80>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
	LED_D_init.Pull = GPIO_NOPULL;
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <ledInit+0x80>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]

	LED_E_init.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <ledInit+0x84>)
 8000360:	2270      	movs	r2, #112	; 0x70
 8000362:	601a      	str	r2, [r3, #0]
	LED_E_init.Alternate = 0;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <ledInit+0x84>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
	LED_E_init.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <ledInit+0x84>)
 800036c:	2201      	movs	r2, #1
 800036e:	605a      	str	r2, [r3, #4]
	LED_E_init.Speed = GPIO_SPEED_FREQ_LOW;
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <ledInit+0x84>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
	LED_E_init.Pull = GPIO_NOPULL;
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <ledInit+0x84>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(GPIOC, &LED_C_init);
 800037c:	4906      	ldr	r1, [pc, #24]	; (8000398 <ledInit+0x7c>)
 800037e:	4809      	ldr	r0, [pc, #36]	; (80003a4 <ledInit+0x88>)
 8000380:	f000 fada 	bl	8000938 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &LED_D_init);
 8000384:	4905      	ldr	r1, [pc, #20]	; (800039c <ledInit+0x80>)
 8000386:	4808      	ldr	r0, [pc, #32]	; (80003a8 <ledInit+0x8c>)
 8000388:	f000 fad6 	bl	8000938 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &LED_E_init);
 800038c:	4904      	ldr	r1, [pc, #16]	; (80003a0 <ledInit+0x84>)
 800038e:	4807      	ldr	r0, [pc, #28]	; (80003ac <ledInit+0x90>)
 8000390:	f000 fad2 	bl	8000938 <HAL_GPIO_Init>



}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000006c 	.word	0x2000006c
 800039c:	20000044 	.word	0x20000044
 80003a0:	20000058 	.word	0x20000058
 80003a4:	48000800 	.word	0x48000800
 80003a8:	48000c00 	.word	0x48000c00
 80003ac:	48001000 	.word	0x48001000

080003b0 <lightLED>:

void lightLED(int numberOfLED)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	if(numberOfLED >= 0 && numberOfLED <= 3)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	db0d      	blt.n	80003da <lightLED+0x2a>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	dc0a      	bgt.n	80003da <lightLED+0x2a>
		HAL_GPIO_WritePin(GPIOC, values_for_LEDS_C[numberOfLED], GPIO_PIN_SET);
 80003c4:	4a17      	ldr	r2, [pc, #92]	; (8000424 <lightLED+0x74>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	4815      	ldr	r0, [pc, #84]	; (8000428 <lightLED+0x78>)
 80003d4:	f000 fc42 	bl	8000c5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, values_for_LEDS_E[0], GPIO_PIN_SET);
	else if(numberOfLED == 5)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(GPIOE, values_for_LEDS_E[numberOfLED-5], GPIO_PIN_SET);
}
 80003d8:	e01f      	b.n	800041a <lightLED+0x6a>
	else if(numberOfLED == 4)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d108      	bne.n	80003f2 <lightLED+0x42>
		HAL_GPIO_WritePin(GPIOE, values_for_LEDS_E[0], GPIO_PIN_SET);
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <lightLED+0x7c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	2201      	movs	r2, #1
 80003e8:	4619      	mov	r1, r3
 80003ea:	4811      	ldr	r0, [pc, #68]	; (8000430 <lightLED+0x80>)
 80003ec:	f000 fc36 	bl	8000c5c <HAL_GPIO_WritePin>
}
 80003f0:	e013      	b.n	800041a <lightLED+0x6a>
	else if(numberOfLED == 5)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b05      	cmp	r3, #5
 80003f6:	d105      	bne.n	8000404 <lightLED+0x54>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2108      	movs	r1, #8
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <lightLED+0x84>)
 80003fe:	f000 fc2d 	bl	8000c5c <HAL_GPIO_WritePin>
}
 8000402:	e00a      	b.n	800041a <lightLED+0x6a>
		HAL_GPIO_WritePin(GPIOE, values_for_LEDS_E[numberOfLED-5], GPIO_PIN_SET);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3b05      	subs	r3, #5
 8000408:	4a08      	ldr	r2, [pc, #32]	; (800042c <lightLED+0x7c>)
 800040a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040e:	b29b      	uxth	r3, r3
 8000410:	2201      	movs	r2, #1
 8000412:	4619      	mov	r1, r3
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <lightLED+0x80>)
 8000416:	f000 fc21 	bl	8000c5c <HAL_GPIO_WritePin>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000000 	.word	0x20000000
 8000428:	48000800 	.word	0x48000800
 800042c:	20000010 	.word	0x20000010
 8000430:	48001000 	.word	0x48001000
 8000434:	48000c00 	.word	0x48000c00

08000438 <lightAllLEDS>:

void lightAllLEDS()
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 8; i++)
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	e008      	b.n	8000456 <lightAllLEDS+0x1e>
	{
		lightLED(i);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ffb3 	bl	80003b0 <lightLED>
		HAL_Delay(200);
 800044a:	20c8      	movs	r0, #200	; 0xc8
 800044c:	f000 f96a 	bl	8000724 <HAL_Delay>
	for(i = 0; i < 8; i++)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3301      	adds	r3, #1
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b07      	cmp	r3, #7
 800045a:	ddf3      	ble.n	8000444 <lightAllLEDS+0xc>
	}
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <resetLED>:

void resetLED(int numberOfLED)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	if(numberOfLED >= 0 && numberOfLED <= 3)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b00      	cmp	r3, #0
 8000474:	db0d      	blt.n	8000492 <resetLED+0x2a>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b03      	cmp	r3, #3
 800047a:	dc0a      	bgt.n	8000492 <resetLED+0x2a>
		HAL_GPIO_WritePin(GPIOC, values_for_LEDS_C[numberOfLED], GPIO_PIN_RESET);
 800047c:	4a17      	ldr	r2, [pc, #92]	; (80004dc <resetLED+0x74>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000484:	b29b      	uxth	r3, r3
 8000486:	2200      	movs	r2, #0
 8000488:	4619      	mov	r1, r3
 800048a:	4815      	ldr	r0, [pc, #84]	; (80004e0 <resetLED+0x78>)
 800048c:	f000 fbe6 	bl	8000c5c <HAL_GPIO_WritePin>
	else if(numberOfLED == 5)
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
	else
		HAL_GPIO_WritePin(GPIOE, values_for_LEDS_E[numberOfLED-5], GPIO_PIN_RESET);

}
 8000490:	e01f      	b.n	80004d2 <resetLED+0x6a>
	else if(numberOfLED == 4)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b04      	cmp	r3, #4
 8000496:	d108      	bne.n	80004aa <resetLED+0x42>
		HAL_GPIO_WritePin(GPIOE, values_for_LEDS_E[0], GPIO_PIN_RESET);
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <resetLED+0x7c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	b29b      	uxth	r3, r3
 800049e:	2200      	movs	r2, #0
 80004a0:	4619      	mov	r1, r3
 80004a2:	4811      	ldr	r0, [pc, #68]	; (80004e8 <resetLED+0x80>)
 80004a4:	f000 fbda 	bl	8000c5c <HAL_GPIO_WritePin>
}
 80004a8:	e013      	b.n	80004d2 <resetLED+0x6a>
	else if(numberOfLED == 5)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d105      	bne.n	80004bc <resetLED+0x54>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2108      	movs	r1, #8
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <resetLED+0x84>)
 80004b6:	f000 fbd1 	bl	8000c5c <HAL_GPIO_WritePin>
}
 80004ba:	e00a      	b.n	80004d2 <resetLED+0x6a>
		HAL_GPIO_WritePin(GPIOE, values_for_LEDS_E[numberOfLED-5], GPIO_PIN_RESET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3b05      	subs	r3, #5
 80004c0:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <resetLED+0x7c>)
 80004c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	2200      	movs	r2, #0
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <resetLED+0x80>)
 80004ce:	f000 fbc5 	bl	8000c5c <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000000 	.word	0x20000000
 80004e0:	48000800 	.word	0x48000800
 80004e4:	20000010 	.word	0x20000010
 80004e8:	48001000 	.word	0x48001000
 80004ec:	48000c00 	.word	0x48000c00

080004f0 <resetAllLEDS>:

void resetAllLEDS()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < 8; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	e008      	b.n	800050e <resetAllLEDS+0x1e>
	{
		resetLED(i);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ffb3 	bl	8000468 <resetLED>
		HAL_Delay(200);
 8000502:	20c8      	movs	r0, #200	; 0xc8
 8000504:	f000 f90e 	bl	8000724 <HAL_Delay>
	for(i = 0; i < 8; i++)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3301      	adds	r3, #1
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b07      	cmp	r3, #7
 8000512:	ddf3      	ble.n	80004fc <resetAllLEDS+0xc>
	}
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000522:	b672      	cpsid	i
}
 8000524:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000526:	e7fe      	b.n	8000526 <Error_Handler+0x8>

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x44>)
 8000530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x44>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6613      	str	r3, [r2, #96]	; 0x60
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x44>)
 800053c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_MspInit+0x44>)
 8000548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <HAL_MspInit+0x44>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	6593      	str	r3, [r2, #88]	; 0x58
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_MspInit+0x44>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f892 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <SystemInit+0x20>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <SystemInit+0x20>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ec:	f7ff ffea 	bl	80005c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f2:	490d      	ldr	r1, [pc, #52]	; (8000628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <LoopForever+0xe>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <LoopForever+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000616:	f001 f991 	bl	800193c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800061a:	f7ff fde7 	bl	80001ec <main>

0800061e <LoopForever>:

LoopForever:
    b LoopForever
 800061e:	e7fe      	b.n	800061e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000620:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800062c:	080019f4 	.word	0x080019f4
  ldr r2, =_sbss
 8000630:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000634:	20000084 	.word	0x20000084

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>

0800063a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f943 	bl	80008d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800064a:	200f      	movs	r0, #15
 800064c:	f000 f80e 	bl	800066c <HAL_InitTick>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	e001      	b.n	8000660 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800065c:	f7ff ff64 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000660:	79fb      	ldrb	r3, [r7, #7]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_InitTick+0x6c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d023      	beq.n	80006c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_InitTick+0x70>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_InitTick+0x6c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000692:	fbb2 f3f3 	udiv	r3, r2, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f941 	bl	800091e <HAL_SYSTICK_Config>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10f      	bne.n	80006c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d809      	bhi.n	80006bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b0:	f000 f919 	bl	80008e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <HAL_InitTick+0x74>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	e007      	b.n	80006cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e004      	b.n	80006cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e001      	b.n	80006cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c8:	2301      	movs	r3, #1
 80006ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000024 	.word	0x20000024
 80006dc:	2000001c 	.word	0x2000001c
 80006e0:	20000020 	.word	0x20000020

080006e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_IncTick+0x20>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_IncTick+0x24>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_IncTick+0x24>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000024 	.word	0x20000024
 8000708:	20000080 	.word	0x20000080

0800070c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <HAL_GetTick+0x14>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000080 	.word	0x20000080

08000724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800072c:	f7ff ffee 	bl	800070c <HAL_GetTick>
 8000730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800073c:	d005      	beq.n	800074a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_Delay+0x44>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074a:	bf00      	nop
 800074c:	f7ff ffde 	bl	800070c <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	429a      	cmp	r2, r3
 800075a:	d8f7      	bhi.n	800074c <HAL_Delay+0x28>
  {
  }
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000024 	.word	0x20000024

0800076c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800089c:	d301      	bcc.n	80008a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089e:	2301      	movs	r3, #1
 80008a0:	e00f      	b.n	80008c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <SysTick_Config+0x40>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008aa:	210f      	movs	r1, #15
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b0:	f7ff ff8e 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <SysTick_Config+0x40>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SysTick_Config+0x40>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff47 	bl	800076c <__NVIC_SetPriorityGrouping>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f8:	f7ff ff5c 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 80008fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff ff8e 	bl	8000824 <NVIC_EncodePriority>
 8000908:	4602      	mov	r2, r0
 800090a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff5d 	bl	80007d0 <__NVIC_SetPriority>
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffb0 	bl	800088c <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e166      	b.n	8000c16 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 8158 	beq.w	8000c10 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 0303 	and.w	r3, r3, #3
 8000968:	2b01      	cmp	r3, #1
 800096a:	d005      	beq.n	8000978 <HAL_GPIO_Init+0x40>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d130      	bne.n	80009da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ae:	2201      	movs	r2, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	f003 0201 	and.w	r2, r3, #1
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d017      	beq.n	8000a16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	6939      	ldr	r1, [r7, #16]
 8000a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0203 	and.w	r2, r3, #3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 80b2 	beq.w	8000c10 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aac:	4b61      	ldr	r3, [pc, #388]	; (8000c34 <HAL_GPIO_Init+0x2fc>)
 8000aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab0:	4a60      	ldr	r2, [pc, #384]	; (8000c34 <HAL_GPIO_Init+0x2fc>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab8:	4b5e      	ldr	r3, [pc, #376]	; (8000c34 <HAL_GPIO_Init+0x2fc>)
 8000aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac4:	4a5c      	ldr	r2, [pc, #368]	; (8000c38 <HAL_GPIO_Init+0x300>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aee:	d02b      	beq.n	8000b48 <HAL_GPIO_Init+0x210>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a52      	ldr	r2, [pc, #328]	; (8000c3c <HAL_GPIO_Init+0x304>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d025      	beq.n	8000b44 <HAL_GPIO_Init+0x20c>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a51      	ldr	r2, [pc, #324]	; (8000c40 <HAL_GPIO_Init+0x308>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d01f      	beq.n	8000b40 <HAL_GPIO_Init+0x208>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a50      	ldr	r2, [pc, #320]	; (8000c44 <HAL_GPIO_Init+0x30c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d019      	beq.n	8000b3c <HAL_GPIO_Init+0x204>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <HAL_GPIO_Init+0x310>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d013      	beq.n	8000b38 <HAL_GPIO_Init+0x200>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a4e      	ldr	r2, [pc, #312]	; (8000c4c <HAL_GPIO_Init+0x314>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d00d      	beq.n	8000b34 <HAL_GPIO_Init+0x1fc>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a4d      	ldr	r2, [pc, #308]	; (8000c50 <HAL_GPIO_Init+0x318>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d007      	beq.n	8000b30 <HAL_GPIO_Init+0x1f8>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a4c      	ldr	r2, [pc, #304]	; (8000c54 <HAL_GPIO_Init+0x31c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d101      	bne.n	8000b2c <HAL_GPIO_Init+0x1f4>
 8000b28:	2307      	movs	r3, #7
 8000b2a:	e00e      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	e00c      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b30:	2306      	movs	r3, #6
 8000b32:	e00a      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b34:	2305      	movs	r3, #5
 8000b36:	e008      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b38:	2304      	movs	r3, #4
 8000b3a:	e006      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e004      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	f002 0203 	and.w	r2, r2, #3
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	4093      	lsls	r3, r2
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b5a:	4937      	ldr	r1, [pc, #220]	; (8000c38 <HAL_GPIO_Init+0x300>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3302      	adds	r3, #2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b8c:	4a32      	ldr	r2, [pc, #200]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b92:	4b31      	ldr	r3, [pc, #196]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bb6:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c0a:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <HAL_GPIO_Init+0x320>)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f47f ae91 	bne.w	8000948 <HAL_GPIO_Init+0x10>
  }
}
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	371c      	adds	r7, #28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00
 8000c48:	48001000 	.word	0x48001000
 8000c4c:	48001400 	.word	0x48001400
 8000c50:	48001800 	.word	0x48001800
 8000c54:	48001c00 	.word	0x48001c00
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c6c:	787b      	ldrb	r3, [r7, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c78:	e002      	b.n	8000c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb6:	d130      	bne.n	8000d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cc4:	d038      	beq.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cce:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2232      	movs	r2, #50	; 0x32
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9b      	lsrs	r3, r3, #18
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cec:	e002      	b.n	8000cf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d00:	d102      	bne.n	8000d08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f2      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d14:	d110      	bne.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e00f      	b.n	8000d3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d26:	d007      	beq.n	8000d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40007000 	.word	0x40007000
 8000d4c:	2000001c 	.word	0x2000001c
 8000d50:	431bde83 	.word	0x431bde83

08000d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d102      	bne.n	8000d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f000 bc16 	b.w	8001594 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d68:	4ba0      	ldr	r3, [pc, #640]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d72:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 80e4 	beq.w	8000f52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d007      	beq.n	8000da0 <HAL_RCC_OscConfig+0x4c>
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	2b0c      	cmp	r3, #12
 8000d94:	f040 808b 	bne.w	8000eae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	f040 8087 	bne.w	8000eae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000da0:	4b92      	ldr	r3, [pc, #584]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d005      	beq.n	8000db8 <HAL_RCC_OscConfig+0x64>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e3ed      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	4b8b      	ldr	r3, [pc, #556]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d004      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x7e>
 8000dc8:	4b88      	ldr	r3, [pc, #544]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dd0:	e005      	b.n	8000dde <HAL_RCC_OscConfig+0x8a>
 8000dd2:	4b86      	ldr	r3, [pc, #536]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d223      	bcs.n	8000e2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 fd48 	bl	800187c <RCC_SetFlashLatencyFromMSIRange>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e3ce      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000df6:	4b7d      	ldr	r3, [pc, #500]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a7c      	ldr	r2, [pc, #496]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b7a      	ldr	r3, [pc, #488]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	4977      	ldr	r1, [pc, #476]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e10:	4313      	orrs	r3, r2
 8000e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e14:	4b75      	ldr	r3, [pc, #468]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	4972      	ldr	r1, [pc, #456]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e24:	4313      	orrs	r3, r2
 8000e26:	604b      	str	r3, [r1, #4]
 8000e28:	e025      	b.n	8000e76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e2a:	4b70      	ldr	r3, [pc, #448]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a6f      	ldr	r2, [pc, #444]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	4b6d      	ldr	r3, [pc, #436]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	496a      	ldr	r1, [pc, #424]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e48:	4b68      	ldr	r3, [pc, #416]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69db      	ldr	r3, [r3, #28]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	4965      	ldr	r1, [pc, #404]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fd08 	bl	800187c <RCC_SetFlashLatencyFromMSIRange>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e38e      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e76:	f000 fc75 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	495a      	ldr	r1, [pc, #360]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e88:	5ccb      	ldrb	r3, [r1, r3]
 8000e8a:	f003 031f 	and.w	r3, r3, #31
 8000e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e92:	4a58      	ldr	r2, [pc, #352]	; (8000ff4 <HAL_RCC_OscConfig+0x2a0>)
 8000e94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e96:	4b58      	ldr	r3, [pc, #352]	; (8000ff8 <HAL_RCC_OscConfig+0x2a4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fbe6 	bl	800066c <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d052      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	e372      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d032      	beq.n	8000f1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eb6:	4b4d      	ldr	r3, [pc, #308]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fc23 	bl	800070c <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000eca:	f7ff fc1f 	bl	800070c <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e35b      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000edc:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f0      	beq.n	8000eca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee8:	4b40      	ldr	r3, [pc, #256]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a3f      	ldr	r2, [pc, #252]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	493a      	ldr	r1, [pc, #232]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	604b      	str	r3, [r1, #4]
 8000f1a:	e01a      	b.n	8000f52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f1c:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a32      	ldr	r2, [pc, #200]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fbf0 	bl	800070c <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f30:	f7ff fbec 	bl	800070c <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e328      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x1dc>
 8000f4e:	e000      	b.n	8000f52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d073      	beq.n	8001046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d005      	beq.n	8000f70 <HAL_RCC_OscConfig+0x21c>
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2b0c      	cmp	r3, #12
 8000f68:	d10e      	bne.n	8000f88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d10b      	bne.n	8000f88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d063      	beq.n	8001044 <HAL_RCC_OscConfig+0x2f0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d15f      	bne.n	8001044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e305      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d106      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x24c>
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e01d      	b.n	8000fdc <HAL_RCC_OscConfig+0x288>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa8:	d10c      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x270>
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e00b      	b.n	8000fdc <HAL_RCC_OscConfig+0x288>
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_RCC_OscConfig+0x298>)
 8000fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d01b      	beq.n	800101c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb92 	bl	800070c <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fea:	e010      	b.n	800100e <HAL_RCC_OscConfig+0x2ba>
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	080019ac 	.word	0x080019ac
 8000ff4:	2000001c 	.word	0x2000001c
 8000ff8:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fb86 	bl	800070c <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e2c2      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	4baf      	ldr	r3, [pc, #700]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0x2a8>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fb76 	bl	800070c <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fb72 	bl	800070c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e2ae      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	4ba5      	ldr	r3, [pc, #660]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x2d0>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d060      	beq.n	8001114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d005      	beq.n	8001064 <HAL_RCC_OscConfig+0x310>
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2b0c      	cmp	r3, #12
 800105c:	d119      	bne.n	8001092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d116      	bne.n	8001092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001064:	4b99      	ldr	r3, [pc, #612]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_OscConfig+0x328>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e28b      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b93      	ldr	r3, [pc, #588]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	061b      	lsls	r3, r3, #24
 800108a:	4990      	ldr	r1, [pc, #576]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001090:	e040      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d023      	beq.n	80010e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800109a:	4b8c      	ldr	r3, [pc, #560]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a8b      	ldr	r2, [pc, #556]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff fb31 	bl	800070c <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fb2d 	bl	800070c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e269      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c0:	4b82      	ldr	r3, [pc, #520]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	497c      	ldr	r1, [pc, #496]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a79      	ldr	r2, [pc, #484]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80010e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ee:	f7ff fb0d 	bl	800070c <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff fb09 	bl	800070c <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e245      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f0      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d03c      	beq.n	800119a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01c      	beq.n	8001162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800112a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112e:	4a67      	ldr	r2, [pc, #412]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff fae8 	bl	800070c <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fae4 	bl	800070c <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e220      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001152:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0ef      	beq.n	8001140 <HAL_RCC_OscConfig+0x3ec>
 8001160:	e01b      	b.n	800119a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001162:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001168:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001172:	f7ff facb 	bl	800070c <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fac7 	bl	800070c <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e203      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800118c:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1ef      	bne.n	800117a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80a6 	beq.w	80012f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10d      	bne.n	80011d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	4b44      	ldr	r3, [pc, #272]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	4a43      	ldr	r2, [pc, #268]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c2:	6593      	str	r3, [r2, #88]	; 0x58
 80011c4:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d0:	2301      	movs	r3, #1
 80011d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <HAL_RCC_OscConfig+0x57c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d118      	bne.n	8001212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_OscConfig+0x57c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <HAL_RCC_OscConfig+0x57c>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fa8e 	bl	800070c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f4:	f7ff fa8a 	bl	800070c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1c6      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HAL_RCC_OscConfig+0x57c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <HAL_RCC_OscConfig+0x4d8>
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800121c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001220:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800122a:	e024      	b.n	8001276 <HAL_RCC_OscConfig+0x522>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d110      	bne.n	8001256 <HAL_RCC_OscConfig+0x502>
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001254:	e00f      	b.n	8001276 <HAL_RCC_OscConfig+0x522>
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 8001268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126c:	4a17      	ldr	r2, [pc, #92]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800126e:	f023 0304 	bic.w	r3, r3, #4
 8001272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d016      	beq.n	80012ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127e:	f7ff fa45 	bl	800070c <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7ff fa41 	bl	800070c <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	; 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e17b      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_RCC_OscConfig+0x578>)
 800129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0ed      	beq.n	8001286 <HAL_RCC_OscConfig+0x532>
 80012aa:	e01a      	b.n	80012e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ac:	f7ff fa2e 	bl	800070c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012b2:	e00f      	b.n	80012d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b4:	f7ff fa2a 	bl	800070c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d906      	bls.n	80012d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e164      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012d4:	4ba8      	ldr	r3, [pc, #672]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1e8      	bne.n	80012b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	4ba3      	ldr	r3, [pc, #652]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ec:	4aa2      	ldr	r2, [pc, #648]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80012ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d03c      	beq.n	800137a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01c      	beq.n	8001342 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001308:	4b9b      	ldr	r3, [pc, #620]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 800130a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130e:	4a9a      	ldr	r2, [pc, #616]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001318:	f7ff f9f8 	bl	800070c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001320:	f7ff f9f4 	bl	800070c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e130      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0ef      	beq.n	8001320 <HAL_RCC_OscConfig+0x5cc>
 8001340:	e01b      	b.n	800137a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001342:	4b8d      	ldr	r3, [pc, #564]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001348:	4a8b      	ldr	r2, [pc, #556]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001352:	f7ff f9db 	bl	800070c <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800135a:	f7ff f9d7 	bl	800070c <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e113      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800136c:	4b82      	ldr	r3, [pc, #520]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 800136e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1ef      	bne.n	800135a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8107 	beq.w	8001592 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	2b02      	cmp	r3, #2
 800138a:	f040 80cb 	bne.w	8001524 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800138e:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f003 0203 	and.w	r2, r3, #3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	429a      	cmp	r2, r3
 80013a0:	d12c      	bne.n	80013fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	3b01      	subs	r3, #1
 80013ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d123      	bne.n	80013fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d11b      	bne.n	80013fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d113      	bne.n	80013fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013de:	085b      	lsrs	r3, r3, #1
 80013e0:	3b01      	subs	r3, #1
 80013e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d109      	bne.n	80013fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	3b01      	subs	r3, #1
 80013f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d06d      	beq.n	80014d8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d068      	beq.n	80014d4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d105      	bne.n	800141a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800140e:	4b5a      	ldr	r3, [pc, #360]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0ba      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800141e:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a55      	ldr	r2, [pc, #340]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001428:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800142a:	f7ff f96f 	bl	800070c <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff f96b 	bl	800070c <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0a7      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	4b49      	ldr	r3, [pc, #292]	; (800157c <HAL_RCC_OscConfig+0x828>)
 8001456:	4013      	ands	r3, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001460:	3a01      	subs	r2, #1
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	4311      	orrs	r1, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800146a:	0212      	lsls	r2, r2, #8
 800146c:	4311      	orrs	r1, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001472:	0852      	lsrs	r2, r2, #1
 8001474:	3a01      	subs	r2, #1
 8001476:	0552      	lsls	r2, r2, #21
 8001478:	4311      	orrs	r1, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800147e:	0852      	lsrs	r2, r2, #1
 8001480:	3a01      	subs	r2, #1
 8001482:	0652      	lsls	r2, r2, #25
 8001484:	4311      	orrs	r1, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800148a:	06d2      	lsls	r2, r2, #27
 800148c:	430a      	orrs	r2, r1
 800148e:	493a      	ldr	r1, [pc, #232]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001490:	4313      	orrs	r3, r2
 8001492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a37      	ldr	r2, [pc, #220]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4a34      	ldr	r2, [pc, #208]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014ac:	f7ff f92e 	bl	800070c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f92a 	bl	800070c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e066      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d2:	e05e      	b.n	8001592 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e05d      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d156      	bne.n	8001592 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a23      	ldr	r2, [pc, #140]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 80014f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014fc:	f7ff f906 	bl	800070c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff f902 	bl	800070c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e03e      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x7b0>
 8001522:	e036      	b.n	8001592 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d031      	beq.n	800158e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001534:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001548:	f023 0303 	bic.w	r3, r3, #3
 800154c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x824>)
 8001554:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff f8d5 	bl	800070c <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001564:	e00c      	b.n	8001580 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff f8d1 	bl	800070c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d905      	bls.n	8001580 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e00d      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
 8001578:	40021000 	.word	0x40021000
 800157c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_RCC_OscConfig+0x848>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ec      	bne.n	8001566 <HAL_RCC_OscConfig+0x812>
 800158c:	e001      	b.n	8001592 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0c8      	b.n	8001746 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_RCC_ClockConfig+0x1b0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d910      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_RCC_ClockConfig+0x1b0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 0207 	bic.w	r2, r3, #7
 80015ca:	4961      	ldr	r1, [pc, #388]	; (8001750 <HAL_RCC_ClockConfig+0x1b0>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <HAL_RCC_ClockConfig+0x1b0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0b0      	b.n	8001746 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d04c      	beq.n	800168a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f8:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d121      	bne.n	8001648 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e09e      	b.n	8001746 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d107      	bne.n	8001620 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001610:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d115      	bne.n	8001648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e092      	b.n	8001746 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d107      	bne.n	8001638 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001628:	4b4a      	ldr	r3, [pc, #296]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e086      	b.n	8001746 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001638:	4b46      	ldr	r3, [pc, #280]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e07e      	b.n	8001746 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001648:	4b42      	ldr	r3, [pc, #264]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 0203 	bic.w	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	493f      	ldr	r1, [pc, #252]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800165a:	f7ff f857 	bl	800070c <HAL_GetTick>
 800165e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001660:	e00a      	b.n	8001678 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001662:	f7ff f853 	bl	800070c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001670:	4293      	cmp	r3, r2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e066      	b.n	8001746 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001678:	4b36      	ldr	r3, [pc, #216]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 020c 	and.w	r2, r3, #12
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	429a      	cmp	r2, r3
 8001688:	d1eb      	bne.n	8001662 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001696:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	492c      	ldr	r1, [pc, #176]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_RCC_ClockConfig+0x1b0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d210      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_RCC_ClockConfig+0x1b0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 0207 	bic.w	r2, r3, #7
 80016be:	4924      	ldr	r1, [pc, #144]	; (8001750 <HAL_RCC_ClockConfig+0x1b0>)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_RCC_ClockConfig+0x1b0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e036      	b.n	8001746 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4918      	ldr	r1, [pc, #96]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4910      	ldr	r1, [pc, #64]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001716:	f000 f825 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_RCC_ClockConfig+0x1b4>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	490c      	ldr	r1, [pc, #48]	; (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff96 	bl	800066c <HAL_InitTick>
 8001740:	4603      	mov	r3, r0
 8001742:	72fb      	strb	r3, [r7, #11]

  return status;
 8001744:	7afb      	ldrb	r3, [r7, #11]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40022000 	.word	0x40022000
 8001754:	40021000 	.word	0x40021000
 8001758:	080019ac 	.word	0x080019ac
 800175c:	2000001c 	.word	0x2000001c
 8001760:	20000020 	.word	0x20000020

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001772:	4b3e      	ldr	r3, [pc, #248]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x34>
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d121      	bne.n	80017d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d11e      	bne.n	80017d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017a4:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e005      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017c0:	4a2b      	ldr	r2, [pc, #172]	; (8001870 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10d      	bne.n	80017ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017d4:	e00a      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d102      	bne.n	80017e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_RCC_GetSysClockFreq+0x110>)
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	e004      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <HAL_RCC_GetSysClockFreq+0x114>)
 80017ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d134      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0xa6>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d003      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0xac>
 8001808:	e005      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_RCC_GetSysClockFreq+0x110>)
 800180c:	617b      	str	r3, [r7, #20]
      break;
 800180e:	e005      	b.n	800181c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_GetSysClockFreq+0x114>)
 8001812:	617b      	str	r3, [r7, #20]
      break;
 8001814:	e002      	b.n	800181c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	617b      	str	r3, [r7, #20]
      break;
 800181a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	3301      	adds	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	fb02 f203 	mul.w	r2, r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001840:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_GetSysClockFreq+0x108>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	0e5b      	lsrs	r3, r3, #25
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	3301      	adds	r3, #1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800185c:	69bb      	ldr	r3, [r7, #24]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	080019bc 	.word	0x080019bc
 8001874:	00f42400 	.word	0x00f42400
 8001878:	007a1200 	.word	0x007a1200

0800187c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001894:	f7ff f9fa 	bl	8000c8c <HAL_PWREx_GetVoltageRange>
 8001898:	6178      	str	r0, [r7, #20]
 800189a:	e014      	b.n	80018c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	4a24      	ldr	r2, [pc, #144]	; (8001934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6593      	str	r3, [r2, #88]	; 0x58
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018b4:	f7ff f9ea 	bl	8000c8c <HAL_PWREx_GetVoltageRange>
 80018b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018cc:	d10b      	bne.n	80018e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d919      	bls.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2ba0      	cmp	r3, #160	; 0xa0
 80018d8:	d902      	bls.n	80018e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018da:	2302      	movs	r3, #2
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	e013      	b.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018e0:	2301      	movs	r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	e010      	b.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b80      	cmp	r3, #128	; 0x80
 80018ea:	d902      	bls.n	80018f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018ec:	2303      	movs	r3, #3
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	e00a      	b.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b80      	cmp	r3, #128	; 0x80
 80018f6:	d102      	bne.n	80018fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018f8:	2302      	movs	r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	e004      	b.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b70      	cmp	r3, #112	; 0x70
 8001902:	d101      	bne.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001904:	2301      	movs	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 0207 	bic.w	r2, r3, #7
 8001910:	4909      	ldr	r1, [pc, #36]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	429a      	cmp	r2, r3
 8001924:	d001      	beq.n	800192a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	40022000 	.word	0x40022000

0800193c <__libc_init_array>:
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	4d0d      	ldr	r5, [pc, #52]	; (8001974 <__libc_init_array+0x38>)
 8001940:	4c0d      	ldr	r4, [pc, #52]	; (8001978 <__libc_init_array+0x3c>)
 8001942:	1b64      	subs	r4, r4, r5
 8001944:	10a4      	asrs	r4, r4, #2
 8001946:	2600      	movs	r6, #0
 8001948:	42a6      	cmp	r6, r4
 800194a:	d109      	bne.n	8001960 <__libc_init_array+0x24>
 800194c:	4d0b      	ldr	r5, [pc, #44]	; (800197c <__libc_init_array+0x40>)
 800194e:	4c0c      	ldr	r4, [pc, #48]	; (8001980 <__libc_init_array+0x44>)
 8001950:	f000 f820 	bl	8001994 <_init>
 8001954:	1b64      	subs	r4, r4, r5
 8001956:	10a4      	asrs	r4, r4, #2
 8001958:	2600      	movs	r6, #0
 800195a:	42a6      	cmp	r6, r4
 800195c:	d105      	bne.n	800196a <__libc_init_array+0x2e>
 800195e:	bd70      	pop	{r4, r5, r6, pc}
 8001960:	f855 3b04 	ldr.w	r3, [r5], #4
 8001964:	4798      	blx	r3
 8001966:	3601      	adds	r6, #1
 8001968:	e7ee      	b.n	8001948 <__libc_init_array+0xc>
 800196a:	f855 3b04 	ldr.w	r3, [r5], #4
 800196e:	4798      	blx	r3
 8001970:	3601      	adds	r6, #1
 8001972:	e7f2      	b.n	800195a <__libc_init_array+0x1e>
 8001974:	080019ec 	.word	0x080019ec
 8001978:	080019ec 	.word	0x080019ec
 800197c:	080019ec 	.word	0x080019ec
 8001980:	080019f0 	.word	0x080019f0

08001984 <memset>:
 8001984:	4402      	add	r2, r0
 8001986:	4603      	mov	r3, r0
 8001988:	4293      	cmp	r3, r2
 800198a:	d100      	bne.n	800198e <memset+0xa>
 800198c:	4770      	bx	lr
 800198e:	f803 1b01 	strb.w	r1, [r3], #1
 8001992:	e7f9      	b.n	8001988 <memset+0x4>

08001994 <_init>:
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	bf00      	nop
 8001998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800199a:	bc08      	pop	{r3}
 800199c:	469e      	mov	lr, r3
 800199e:	4770      	bx	lr

080019a0 <_fini>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	bf00      	nop
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr
